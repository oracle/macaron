# serializer version: 1
# name: test_actionparser_parse[codeql-analysis.yml]
  dict({
    'jobs': dict({
      'analyze': dict({
        'name': 'Analyze',
        'permissions': dict({
          'actions': 'read',
          'contents': 'read',
          'security-events': 'write',
        }),
        'runs-on': 'ubuntu-latest',
        'steps': list([
          dict({
            'name': 'Checkout repository',
            'uses': 'actions/checkout@v2',
          }),
          dict({
            'name': 'Initialize CodeQL',
            'uses': 'github/codeql-action/init@v2',
            'with': dict({
              'languages': '${{ matrix.language }}',
            }),
          }),
          dict({
            'name': 'Autobuild',
            'uses': 'github/codeql-action/autobuild@v2',
          }),
          dict({
            'name': 'Perform CodeQL Analysis',
            'uses': 'github/codeql-action/analyze@v2',
          }),
        ]),
        'strategy': dict({
          'fail-fast': False,
          'matrix': dict({
            'language': list([
              'java',
            ]),
          }),
        }),
      }),
    }),
    'name': 'CodeQL',
    'on': dict({
      'pull_request': dict({
        'branches': list([
          'master',
          '3.0',
          '2.14',
          '2.13',
        ]),
        'paths-ignore': list([
          'README.md',
          'release-notes/*',
        ]),
      }),
      'push': dict({
        'branches': list([
          'master',
          '3.0',
          '2.14',
          '2.13',
        ]),
        'paths-ignore': list([
          'README.md',
          'release-notes/*',
        ]),
      }),
      'schedule': list([
        dict({
          'cron': '40 21 * * 2',
        }),
      ]),
    }),
  })
# ---
# name: test_actionparser_parse[maven.yml]
  dict({
    'jobs': dict({
      'build': dict({
        'runs-on': '${{ matrix.os }}',
        'steps': list([
          dict({
            'uses': 'actions/checkout@v2',
          }),
          dict({
            'uses': 'actions/setup-java@v2',
            'with': dict({
              'cache': 'maven',
              'distribution': 'temurin',
              'java-version': 8,
            }),
          }),
          dict({
            'name': 'Build with Maven',
            'run': 'mvn verify -e -B -V -DdistributionFileName=apache-maven',
          }),
          dict({
            'if': "${{ matrix.os == 'ubuntu-latest' }}",
            'name': 'Upload built Maven',
            'uses': 'actions/upload-artifact@v2',
            'with': dict({
              'name': 'built-maven',
              'path': 'apache-maven/target/',
            }),
          }),
        ]),
        'strategy': dict({
          'fail-fast': False,
          'matrix': dict({
            'os': list([
              'ubuntu-latest',
              'windows-latest',
              'macOS-latest',
            ]),
          }),
        }),
      }),
      'integration-test': dict({
        'needs': 'build',
        'runs-on': '${{ matrix.os }}',
        'steps': list([
          dict({
            'env': dict({
              'PR_HEAD_LABEL': '${{ github.event.pull_request.head.label }}',
            }),
            'name': 'Collect environment context variables',
            'run': '''
              set +e
              repo=maven-integration-testing
              target_branch=master
              target_user=apache
              if [ "$GITHUB_EVENT_NAME" == "pull_request" ]; then
                user=${PR_HEAD_LABEL%:*}
                branch=${PR_HEAD_LABEL#*:}
              else
                user=${GITHUB_REPOSITORY%/*}
                branch=${GITHUB_REF#refs/heads/}
              fi
              if [ $branch != "master" ]; then
                git ls-remote https://github.com/$user/$repo.git | grep "refs/heads/${branch}$" > /dev/null
                if [ $? -eq 0 ]; then
                  echo "Found a branch \"$branch\" in fork \"$user/$repo\", configuring this for the integration tests to be run against."
                  target_branch=$branch
                  target_user=$user
                else
                  echo "Could not find fork \"$user/$repo\" or a branch \"$branch\" in this fork. Falling back to \"$target_branch\" in \"$target_user/$repo\"."
                fi
              else
                echo "Integration tests will run against $target_user/$repo for master builds."
              fi
              echo "REPO_BRANCH=$target_branch" >> $GITHUB_ENV
              echo "REPO_USER=$target_user" >> $GITHUB_ENV
  
            ''',
            'shell': 'bash',
          }),
          dict({
            'name': 'Checkout maven-integration-testing',
            'uses': 'actions/checkout@v2',
            'with': dict({
              'path': 'maven-integration-testing/',
              'ref': '${{ env.REPO_BRANCH }}',
              'repository': '${{ env.REPO_USER }}/maven-integration-testing',
            }),
          }),
          dict({
            'name': 'Set up cache for ~/.m2/repository',
            'uses': 'actions/cache@v2',
            'with': dict({
              'key': "it-m2-repo-${{ matrix.os }}-${{ hashFiles('maven-integration-testing/**/pom.xml') }}",
              'path': '~/.m2/repository',
              'restore-keys': '''
                it-m2-repo-${{ matrix.os }}-
  
              ''',
            }),
          }),
          dict({
            'name': 'Download built Maven',
            'uses': 'actions/download-artifact@v2',
            'with': dict({
              'name': 'built-maven',
              'path': 'built-maven/',
            }),
          }),
          dict({
            'name': 'Set up JDK',
            'uses': 'actions/setup-java@v2',
            'with': dict({
              'cache': 'maven',
              'distribution': 'temurin',
              'java-version': '${{ matrix.java }}',
            }),
          }),
          dict({
            'name': 'Running integration tests',
            'run': 'mvn install -e -B -V -Prun-its,embedded -Dmaven.repo.local="$HOME/.m2/repository" -DmavenDistro="$GITHUB_WORKSPACE/built-maven/apache-maven-bin.zip" -f maven-integration-testing/pom.xml',
            'shell': 'bash',
          }),
        ]),
        'strategy': dict({
          'fail-fast': False,
          'matrix': dict({
            'java': list([
              8,
              11,
              17,
            ]),
            'os': list([
              'ubuntu-latest',
              'windows-latest',
              'macOS-latest',
            ]),
          }),
        }),
      }),
    }),
    'name': 'Java CI',
    'on': list([
      'push',
      'pull_request',
    ]),
  })
# ---
