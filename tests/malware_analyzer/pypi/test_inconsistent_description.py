# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the InconsistentDescriptionAnalyzer heuristic."""

from unittest.mock import MagicMock, patch

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.inconsistent_description import InconsistentDescriptionAnalyzer


@pytest.fixture(name="analyzer")
def analyzer_() -> InconsistentDescriptionAnalyzer:
    """Pytest fixture to create an InconsistentDescriptionAnalyzer instance."""
    return InconsistentDescriptionAnalyzer()


@pytest.fixture(autouse=True)
def skip_if_client_disabled(analyzer: InconsistentDescriptionAnalyzer) -> None:
    """
    Automatically skip tests in this file if the AI client is disabled.
    """
    if not analyzer.client:
        pytest.skip("AI client disabled - skipping test")


def test_analyze_consistent_description_pass(
    analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock
) -> None:
    """Test the analyzer passes when the description is consistent."""
    pypi_package_json.package_json = {"info": {"description": "This is a test package."}}
    mock_result = {"score": 80, "reason": "The description is consistent."}

    with patch.object(analyzer.client, "invoke", return_value=mock_result) as mock_invoke:
        result, info = analyzer.analyze(pypi_package_json)
        assert result == HeuristicResult.PASS
        assert isinstance(info["message"], str)
        assert "consistent description with a 80 score" in info["message"]
        mock_invoke.assert_called_once()


def test_analyze_inconsistent_description_fail(
    analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock
) -> None:
    """Test the analyzer fails when the description is inconsistent."""
    pypi_package_json.package_json = {"info": {"description": "This is a misleading package."}}
    mock_result = {"score": 30, "reason": "The description is misleading."}

    with patch.object(analyzer.client, "invoke", return_value=mock_result) as mock_invoke:
        result, info = analyzer.analyze(pypi_package_json)
        assert result == HeuristicResult.FAIL
        assert isinstance(info["message"], str)
        assert "inconsistent description with score 30" in info["message"]
        assert "because The description is misleading" in info["message"]
        mock_invoke.assert_called_once()


def test_analyze_no_description_fail(analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails if there is no description."""
    pypi_package_json.package_json = {"info": {"description": " "}}
    with patch.object(analyzer.client, "invoke") as mock_invoke:
        result, info = analyzer.analyze(pypi_package_json)
        assert result == HeuristicResult.FAIL
        assert info["message"] == "No description found."
        mock_invoke.assert_not_called()


def test_analyze_no_info_raises_error(analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer raises an error if the package JSON has no 'info' field."""
    pypi_package_json.package_json = {}
    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)
