# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the InconsistentDescriptionAnalyzer heuristic."""

from unittest.mock import MagicMock, patch

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.inconsistent_description import InconsistentDescriptionAnalyzer


@pytest.fixture(name="analyzer")
def analyzer_() -> InconsistentDescriptionAnalyzer:
    """Pytest fixture to create an InconsistentDescriptionAnalyzer instance."""
    return InconsistentDescriptionAnalyzer()


@pytest.fixture(autouse=True)
def skip_if_client_disabled(analyzer: InconsistentDescriptionAnalyzer) -> None:
    """
    Automatically skip tests in this file if the AI client is disabled.
    """
    if not analyzer.client:
        pytest.skip("AI client disabled - skipping test")


def test_analyze_inconsistent_description_fail(
    analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock
) -> None:
    """Test the analyzer fails when the description is inconsistent."""
    pypi_package_json.package_json = {"info": {"description": "This is a misleading package."}}

    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert isinstance(info["message"], str)
    assert info["message"].startswith("inconsistent description with score")


def test_analyze_no_description_fail(analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails if there is no description."""
    pypi_package_json.package_json = {"info": {"description": " "}}
    with patch.object(analyzer.client, "invoke") as mock_invoke:
        result, info = analyzer.analyze(pypi_package_json)
        assert result == HeuristicResult.FAIL
        assert info["message"] == "No description found."
        mock_invoke.assert_not_called()


def test_analyze_no_info_raises_error(analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer raises an error if the package JSON has no 'info' field."""
    pypi_package_json.package_json = {}
    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


CONSISTENT_DESCRIPTION = """
# Requests

**Requests** is a simple, yet elegant, HTTP library.

Requests allows you to send HTTP/1.1 requests extremely easily.
There’s no need to manually add query strings to your URLs,
or to form-encode your `PUT` & `POST` data — but nowadays, just use the `json` method!

Requests is one of the most downloaded Python packages today,
pulling in around `30M downloads / week`— according to GitHub,
Requests is currently
[depended upon](https://github.com/psf/requests/network/dependents?package_id=UGFja2FnZS01NzA4OTExNg%3D%3D)
by `1,000,000+` repositories.
You may certainly put your trust in this code.

[![Downloads](https://static.pepy.tech/badge/requests/month)](https://pepy.tech/project/requests)
[![Supported Versions](https://img.shields.io/pypi/pyversions/requests.svg)](https://pypi.org/project/requests)
[![Contributors](https://img.shields.io/github/contributors/psf/requests.svg)](https://github.com/psf/requests/graphs/contributors)

## Installing Requests and Supported Versions

Requests is available on PyPI:

```console
$ python -m pip install requests
```

Requests officially supports Python 3.9+.

## Supported Features & Best–Practices

Requests is ready for the demands of building robust and reliable HTTP–speaking applications, for the needs of today.

- Keep-Alive & Connection Pooling
- International Domains and URLs
- Sessions with Cookie Persistence
- Browser-style TLS/SSL Verification
- Basic & Digest Authentication
- Familiar `dict`–like Cookies
- Automatic Content Decompression and Decoding
- Multi-part File Uploads
- SOCKS Proxy Support
- Connection Timeouts
- Streaming Downloads
- Automatic honoring of `.netrc`
- Chunked HTTP Requests

## API Reference and User Guide available on [Read the Docs](https://requests.readthedocs.io)

[![Read the Docs](https://raw.githubusercontent.com/psf/requests/main/ext/ss.png)](https://requests.readthedocs.io)

## Cloning the repository

When cloning the Requests repository, you may need to add the `-c
fetch.fsck.badTimezone=ignore` flag to avoid an error about a bad commit timestamp (see
[this issue](https://github.com/psf/requests/issues/2690) for more background):

```shell
git clone -c fetch.fsck.badTimezone=ignore https://github.com/psf/requests.git
```

You can also apply this setting to your global Git config:

```shell
git config --global fetch.fsck.badTimezone ignore
```

---

[![Kenneth Reitz](https://raw.githubusercontent.com/psf/requests/main/ext/kr.png)](https://kennethreitz.org)
[![Python Software Foundation](https://raw.githubusercontent.com/psf/requests/main/ext/psf.png)](https://www.python.org/psf)
"""


def test_analyze_consistent_description_pass(
    analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock
) -> None:
    """Test the analyzer passes when the description is consistent."""
    pypi_package_json.package_json = {
        "info": {
            "description": CONSISTENT_DESCRIPTION,
        }
    }

    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert isinstance(info["message"], str)
    assert info["message"].startswith("consistent description with a ")


def test_analyze_excessive_llm_invocation_error_skip(
    analyzer: InconsistentDescriptionAnalyzer, pypi_package_json: MagicMock
) -> None:
    """Test the analyzer skips if the LLM invocation returns None multiple times."""
    pypi_package_json.package_json = {
        "info": {
            "description": "description",
        }
    }

    with patch.object(analyzer.client, "invoke", return_value=None):
        result, info = analyzer.analyze(pypi_package_json)
        assert result == HeuristicResult.SKIP
        assert not info
