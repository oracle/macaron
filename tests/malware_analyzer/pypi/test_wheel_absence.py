# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting wheel (.whl) file absence from PyPI packages"""
from unittest.mock import MagicMock, patch

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.wheel_absence import WheelAbsenceAnalyzer
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIInspectorAsset, PyPIPackageJsonAsset


def test_no_information(pypi_package_json: MagicMock) -> None:
    """Test for when inspector links cannot be created, so error"""
    analyzer = WheelAbsenceAnalyzer()

    pypi_package_json.get_inspector_links.return_value = False

    with pytest.raises(HeuristicAnalyzerValueError):
        _ = analyzer.analyze(pypi_package_json)


def test_no_wheel_links(pypi_package_json: MagicMock) -> None:
    """Test for when no .whl files are present in the asset, so failed"""
    analyzer = WheelAbsenceAnalyzer()

    pypi_package_json.get_inspector_links.return_value = True
    pypi_package_json.inspector_asset.package_whl_links = []
    pypi_package_json.inspector_asset.package_link_reachability = {}

    result, _ = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL


def test_wheel_links(pypi_package_json: MagicMock) -> None:
    """Test for when at least one .whl file is present in the asset, so pass"""
    analyzer = WheelAbsenceAnalyzer()

    link = "https://files.pythonhosted.org/packages/de/fa/2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3/package.whl"
    pypi_package_json.get_inspector_links.return_value = True
    pypi_package_json.inspector_asset.package_whl_links = [link]
    pypi_package_json.inspector_asset.package_link_reachability = {link: True}

    result, _ = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS


# Note: to patch a function, the way it is imported matters.
# E.g. if it is imported like this: import os; os.listdir() then you patch os.listdir.
# If it is imported like this: from os import listdir; listdir() then you patch <module>.listdir.
@patch("macaron.slsa_analyzer.package_registry.pypi_registry.send_head_http_raw")
def test_get_inspector_links(mock_send_head_http_raw: MagicMock) -> None:
    """Test to make sure the internal function used by this analyzer produces the correct output from JSON metadata"""
    version = "0.1.0"
    package_name = "ttttttttest_nester"
    file_prefix = package_name + "-" + version
    b2b_first = "de"
    b2b_second = "fa"
    b2b_rest = "2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3"
    blake2b_hash = b2b_first + b2b_second + b2b_rest
    hash_link_prefix = f"{b2b_first}/{b2b_second}/{b2b_rest}/{file_prefix}"

    wheel_url = f"https://files.pythonhosted.org/packages/{hash_link_prefix}.whl"
    tar_url = f"https://files.pythonhosted.org/packages/{hash_link_prefix}.tar.gz"
    wheel_link_expected = (
        f"https://inspector.pypi.io/project/{package_name}/{version}/packages/" + f"{hash_link_prefix}.whl"
    )
    tar_link_expected = (
        f"https://inspector.pypi.io/project/{package_name}/{version}/packages/" + f"{hash_link_prefix}.tar.gz"
    )

    release = {
        version: [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": blake2b_hash,
                    "md5": "9203bbb130f8ddb38269f4861c170d04",
                    "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
                },
                "downloads": -1,
                "filename": f"{file_prefix}.whl",
                "has_sig": False,
                "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
                "packagetype": "bdist_wheel",
                "python_version": "py2.py3",
                "requires_python": None,
                "size": 546,
                "upload_time": "2016-10-13T05:42:27",
                "upload_time_iso_8601": "2016-10-13T05:42:27.073842Z",
                "url": wheel_url,
                "yanked": False,
                "yanked_reason": None,
            },
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": blake2b_hash,
                    "md5": "9203bbb130f8ddb38269f4861c170d04",
                    "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
                },
                "downloads": -1,
                "filename": f"{file_prefix}.tar.gz",
                "has_sig": False,
                "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": None,
                "size": 546,
                "upload_time": "2016-10-13T05:42:27",
                "upload_time_iso_8601": "2016-10-13T05:42:27.073842Z",
                "url": tar_url,
                "yanked": False,
                "yanked_reason": None,
            },
        ]
    }

    package_json = {"info": {"name": package_name}, "releases": release}
    pypi_registry = MagicMock()
    pypi_registry.inspector_url_scheme = "https"
    pypi_registry.inspector_url_netloc = "inspector.pypi.io"
    mock_send_head_http_raw.return_value = MagicMock()  # assume valid URL for testing purposes

    pypi_package_json = PyPIPackageJsonAsset(
        package_name, version, False, pypi_registry, package_json, "", PyPIInspectorAsset("", [], {})
    )

    assert pypi_package_json.get_inspector_links() is True
    assert pypi_package_json.inspector_asset.package_sdist_link == tar_link_expected
    assert len(pypi_package_json.inspector_asset.package_whl_links) == 1
    assert pypi_package_json.inspector_asset.package_whl_links[0] == wheel_link_expected
    assert pypi_package_json.inspector_asset.package_link_reachability == {
        tar_link_expected: True,
        wheel_link_expected: True,
    }
