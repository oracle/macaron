# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
import unittest
from unittest.mock import MagicMock

from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIApiClient
from macaron.slsa_analyzer.pypi_heuristics.analysis_result import RESULT
from macaron.slsa_analyzer.pypi_heuristics.metadata.one_release import OneReleaseAnalyzer


class TestOneReleaseAnalyzer(unittest.TestCase):
    """Test for OneReleaseAnalyzer"""

    def setUp(self) -> None:
        self.package_with_one_release = "ttttttttest-nester.py"
        self.package_with_many_releases = "requests"
        self.mock_api_client_fail = MagicMock(spec=PyPIApiClient(self.package_with_one_release))
        self.mock_api_client_pass = MagicMock(spec=PyPIApiClient(self.package_with_many_releases))
        self.analyzer_fail = OneReleaseAnalyzer(api_client=self.mock_api_client_fail)
        self.analyzer_pass = OneReleaseAnalyzer(api_client=self.mock_api_client_pass)

    def test_analyze_no_releases(self) -> None:
        """Test for result skipped"""
        self.mock_api_client_pass.get_releases.return_value = {}
        expected_result: tuple[RESULT, dict] = (RESULT.SKIP, {"releases": {}})

        result = self.analyzer_pass.analyze()

        self.assertEqual(result, expected_result)

    def test_analyze_one_release(self) -> None:
        """Test for result failed"""
        release = {
            "0.1.0": [
                {
                    "comment_text": "",
                    "digests": {
                        "blake2b_256": "defa2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3",
                        "md5": "9203bbb130f8ddb38269f4861c170d04",
                        "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
                    },
                    "downloads": -1,
                    "filename": "ttttttttest_nester.py-0.1.0.tar.gz",
                    "has_sig": False,
                    "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
                    "packagetype": "sdist",
                    "python_version": "source",
                    "requires_python": None,
                    "size": 546,
                    "upload_time": "2016-10-13T05:42:27",
                    "upload_time_iso_8601": "2016-10-13T05:42:27.073842Z",
                    "url": "https://files.pythonhosted.org/packages/de/fa/2fbcebaeeb909511139ce28d \
                    ac4a77ab2452ba72b49a22b12981b2f375b3/ttttttttest_nester.py-0.1.0.tar.gz",
                    "yanked": False,
                    "yanked_reason": None,
                }
            ]
        }
        self.mock_api_client_fail.get_releases.return_value = release
        expected_result: tuple[RESULT, dict] = (RESULT.FAIL, {"releases": release})

        result = self.analyzer_fail.analyze()

        self.assertEqual(result, expected_result)

    def test_analyze_multiple_releases(self) -> None:
        """Test for result passed"""
        releases = {
            "0.0.1": [],
            "0.10.0": [
                {
                    "comment_text": "",
                    "digests": {
                        "blake2b_256": "62350230421b8c4efad6624518028163329ad0c2df9e58e6b3bee013427bf8f6",
                        "md5": "c90a48af18eb4170dbe4832c1104440c",
                        "sha256": "210a82e678c45d433a4ad1f105974b3102a8ab5198872dc0a3238a8750d4c65e",
                    },
                    "downloads": -1,
                    "filename": "requests-0.10.0.tar.gz",
                    "has_sig": False,
                    "md5_digest": "c90a48af18eb4170dbe4832c1104440c",
                    "packagetype": "sdist",
                    "python_version": "source",
                    "requires_python": None,
                    "size": 62046,
                    "upload_time": "2012-01-22T05:08:17",
                    "upload_time_iso_8601": "2012-01-22T05:08:17.091441Z",
                    "url": "https://files.pythonhosted.org/packages/62/35/0230421b8c4efad662451802816332 \
                    9ad0c2df9e58e6b3bee013427bf8f6/requests-0.10.0.tar.gz",
                    "yanked": False,
                    "yanked_reason": None,
                }
            ],
        }
        self.mock_api_client_pass.get_releases.return_value = releases
        expected_result: tuple[RESULT, dict] = (RESULT.PASS, {"releases": releases})

        result = self.analyzer_pass.analyze()

        self.assertEqual(result, expected_result)
