# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
from unittest.mock import MagicMock

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.empty_project_link import EmptyProjectLinkAnalyzer
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset


@pytest.fixture(name="empty_project_link_analyzer")
def setup_empty_project_link_analyzer() -> dict:
    """Create an empty-project-link-analyzer setup.

    Returns
    -------
        dict: Setup data for the test.
    """
    mock_pypi_package_pass = MagicMock(spec=PyPIPackageJsonAsset)
    mock_pypi_package_fail = MagicMock(spec=PyPIPackageJsonAsset)
    analyzer = EmptyProjectLinkAnalyzer()
    package_links = {
        "Documentation": "https://requests.readthedocs.io",
        "Homepage": "https://requests.readthedocs.io",
        "Source": "https://github.com/psf/requests",
    }

    return {
        "mock_pypi_package_pass": mock_pypi_package_pass,
        "mock_pypi_package_fail": mock_pypi_package_fail,
        "analyzer": analyzer,
        "package_links": package_links,
    }


def test_no_links(empty_project_link_analyzer: dict) -> None:
    """Test with no links (should fail).

    Parameters
    ----------
    empty_project_link_analyzer: dict
        A configured EmptyProjectLinkAnalyzer from the fixture.
    """
    mock_pypi_package_fail = empty_project_link_analyzer["mock_pypi_package_fail"]
    mock_pypi_package_fail.get_project_links.return_value = {}
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.FAIL, {})

    result = empty_project_link_analyzer["analyzer"].analyze(mock_pypi_package_fail)

    assert result == expected_result


def test_with_links(empty_project_link_analyzer: dict) -> None:
    """Test with links present (should pass).

    Parameters
    ----------
    empty_project_link_analyzer: dict
        A configured EmptyProjectLinkAnalyzer from the fixture.
    """
    package_links = empty_project_link_analyzer["package_links"]
    mock_pypi_package_pass = empty_project_link_analyzer["mock_pypi_package_pass"]
    mock_pypi_package_pass.get_project_links.return_value = package_links
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.PASS, {"project_links": package_links})

    result = empty_project_link_analyzer["analyzer"].analyze(mock_pypi_package_pass)

    assert result == expected_result
