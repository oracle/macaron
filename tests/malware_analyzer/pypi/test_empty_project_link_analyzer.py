# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
import unittest
from unittest.mock import MagicMock

from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIApiClient
from macaron.slsa_analyzer.pypi_heuristics.analysis_result import RESULT
from macaron.slsa_analyzer.pypi_heuristics.metadata.empty_project_link import EmptyProjectLinkAnalyzer


class TestEmptyProjectLinkAnalyzer(unittest.TestCase):
    """Tests for EmptyProjectLinkAnalyzer"""

    def setUp(self) -> None:
        self.package_with_links = "requests"
        self.package_no_links = "sfy_hello"
        self.mock_api_client_pass = MagicMock(spec=PyPIApiClient(self.package_with_links))
        self.mock_api_client_fail = MagicMock(spec=PyPIApiClient(self.package_no_links))
        self.analyzer_pass = EmptyProjectLinkAnalyzer(api_client=self.mock_api_client_pass)
        self.analyzer_fail = EmptyProjectLinkAnalyzer(api_client=self.mock_api_client_fail)
        self.package_links = {
            "Documentation": "https://requests.readthedocs.io",
            "Homepage": "https://requests.readthedocs.io",
            "Source": "https://github.com/psf/requests",
        }

    def test_analyze_no_links(self) -> None:
        """Test for result failed"""
        self.mock_api_client_fail.get_project_links.return_value = {}
        expected_result: tuple[RESULT, dict] = (RESULT.FAIL, {})

        result = self.analyzer_fail.analyze()

        self.assertEqual(result, expected_result)

    def test_analyze_with_links(self) -> None:
        """Test for result passed"""
        self.mock_api_client_pass.get_project_links.return_value = self.package_links
        expected_result: tuple[RESULT, dict] = (RESULT.PASS, self.package_links)

        result = self.analyzer_pass.analyze()

        self.assertEqual(result, expected_result)

    def test_analyze_none(self) -> None:
        """Test for result skip"""
        self.mock_api_client_pass.get_project_links.return_value = None
        expected_result: tuple[RESULT, dict] = (RESULT.SKIP, {})

        result = self.analyzer_pass.analyze()

        self.assertEqual(result, expected_result)
