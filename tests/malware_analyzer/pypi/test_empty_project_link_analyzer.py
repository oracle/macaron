# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
from macaron.malware_analyzer.pypi_heuristics.analysis_result import HeuristicResult


def test_analyze_no_links(empty_project_link_analyzer: dict) -> None:
    """Test for result failed"""
    mock_api_client_fail = empty_project_link_analyzer["mock_api_client_fail"]
    mock_api_client_fail.get_project_links.return_value = {}
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.FAIL, {})

    result = empty_project_link_analyzer["analyzer"].analyze(mock_api_client_fail)

    assert result == expected_result


def test_analyze_with_links(empty_project_link_analyzer: dict) -> None:
    """Test for result passed"""
    package_links = empty_project_link_analyzer["package_links"]
    mock_api_client_pass = empty_project_link_analyzer["mock_api_client_pass"]
    mock_api_client_pass.get_project_links.return_value = package_links
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.PASS, {"project_links": package_links})

    result = empty_project_link_analyzer["analyzer"].analyze(mock_api_client_pass)

    assert result == expected_result


def test_analyze_none(empty_project_link_analyzer: dict) -> None:
    """Test for result skip"""
    mock_api_client_pass = empty_project_link_analyzer["mock_api_client_pass"]
    mock_api_client_pass.get_project_links.return_value = None
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.SKIP, {})

    result = empty_project_link_analyzer["analyzer"].analyze(mock_api_client_pass)

    assert result == expected_result
