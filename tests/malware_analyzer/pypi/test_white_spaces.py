# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the WhiteSpacesAnalyzer heuristic."""
# pylint: disable=redefined-outer-name


from unittest.mock import MagicMock

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.sourcecode.white_spaces import WhiteSpacesAnalyzer


@pytest.fixture()
def analyzer() -> WhiteSpacesAnalyzer:
    """Pytest fixture to create a WhiteSpacesAnalyzer instance."""
    analyzer_instance = WhiteSpacesAnalyzer()
    return analyzer_instance


def test_analyze_no_sourcecode(analyzer: WhiteSpacesAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer skips when there is no source code."""
    pypi_package_json.get_sourcecode.return_value = None
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.SKIP
    assert info == {}


def test_analyze_pass(analyzer: WhiteSpacesAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when no suspicious whitespace is found."""
    pypi_package_json.get_sourcecode.return_value = {"test.py": "print('hello')"}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info == {}


def test_analyze_fail_long_spaces(analyzer: WhiteSpacesAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when long spaces are found."""
    repeated_spaces_threshold = analyzer.repeated_spaces_threshold
    code = f"print('hello')\n{' ' * (repeated_spaces_threshold + 1)}print('world')"
    pypi_package_json.get_sourcecode.return_value = {"test.py": code}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["file"] == "test.py"


def test_analyze_fail_invisible_chars(analyzer: WhiteSpacesAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when invisible characters are found."""
    repeated_spaces_threshold = analyzer.repeated_spaces_threshold
    invisible_char = "\u200b"  # Zero-width space.
    code = f"print('hello'){invisible_char * repeated_spaces_threshold}print('world')"
    pypi_package_json.get_sourcecode.return_value = {"test.py": code}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["file"] == "test.py"


def test_has_white_spaces_long_spaces(analyzer: WhiteSpacesAnalyzer) -> None:
    """Test has_white_spaces method with long spaces."""
    repeated_spaces_threshold = analyzer.repeated_spaces_threshold
    code = f"print('hello')\n{' ' * repeated_spaces_threshold}print('world')"
    assert analyzer.has_white_spaces(code)


def test_has_white_spaces_no_suspicious(analyzer: WhiteSpacesAnalyzer) -> None:
    """Test has_white_spaces method with no suspicious whitespace."""
    code = "print('hello')\nprint('world')"
    assert not analyzer.has_white_spaces(code)
