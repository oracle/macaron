# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the StubNameAnalyzer heuristic."""

from unittest.mock import MagicMock

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.stub_name import StubNameAnalyzer


@pytest.fixture(name="analyzer")
def analyzer_() -> StubNameAnalyzer:
    """Pytest fixture to create a StubNameAnalyzer instance."""
    return StubNameAnalyzer()


@pytest.mark.parametrize(
    ("package_name", "expected_result"),
    [
        ("numpy", HeuristicResult.FAIL),
        ("pandas", HeuristicResult.FAIL),
        ("scikit-learn", HeuristicResult.FAIL),
        ("tensorflow-stub", HeuristicResult.PASS),
        ("torch-stubs", HeuristicResult.PASS),
        ("requests", HeuristicResult.FAIL),
        ("flask-stub", HeuristicResult.PASS),
        ("my_package", HeuristicResult.FAIL),
        ("requests-stub-client", HeuristicResult.PASS),
        ("testpackage", HeuristicResult.FAIL),
    ],
)
def test_analyze_various_package_names(
    analyzer: StubNameAnalyzer,
    pypi_package_json: MagicMock,
    package_name: str,
    expected_result: HeuristicResult,
) -> None:
    """Test the analyzer with various package names."""
    pypi_package_json.component_name = package_name
    result, _ = analyzer.analyze(pypi_package_json)

    assert result == expected_result
