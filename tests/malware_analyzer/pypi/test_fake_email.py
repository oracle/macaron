# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the FakeEmailAnalyzer heuristic."""


import os
from pathlib import Path
from unittest.mock import MagicMock

import pytest

from macaron.config.defaults import load_defaults
from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.fake_email import FakeEmailAnalyzer

# If check_deliverability is True, DNS-based check is enabled for email_validator.
# If check_deliverability is True and no network is available, email_validator will perform DNS-based check
# but the DNS queries will time out.
# email_validator doesn't treat timeout as a validation failure:
# https://github.com/JoshData/python-email-validator/blob/98800bac023b8713351393a5043034065f1ea6cb/email_validator/deliverability.py#L144
# Therefore, FakeEmailAnalyzer.is_valid_email doesn't return None, and we will treat this as an "valid email".
# This has a risk of treating an invalid email as valid when an unexpected timeout occurs.
# We have ensured that check_deliverability is always False for all unit test cases in this module, so that behavior
# is not expected to happen.


@pytest.fixture(name="fake_email_defaults_override")
def set_defaults_(tmp_path: Path) -> None:
    """Disable check_deliverability in defaults.ini so we do not make network connections.

    Parameters
    ----------
    tmp_path: Path
        Pytest temporary path fixture.
    """
    defaults_file = Path(os.path.join(tmp_path, "config.ini"))
    content = """
    [heuristic.pypi]
    check_deliverability = False
    """
    defaults_file.write_text(content, encoding="utf-8")
    assert load_defaults(str(defaults_file)) is True


@pytest.fixture(name="analyzer")
def analyzer_(fake_email_defaults_override: None) -> FakeEmailAnalyzer:  # pylint: disable=unused-argument
    """Pytest fixture to create a FakeEmailAnalyzer instance."""
    return FakeEmailAnalyzer()


def test_missing_info(pypi_package_json: MagicMock, analyzer: FakeEmailAnalyzer) -> None:
    """Test when JSON 'info' key is missing in the PyPI data (should error).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    analyzer: FakeEmailAnalyzer
        An initialized FakeEmailAnalyzer instance.
    """
    pypi_package_json.package_json = {}  # No 'info' key
    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


def test_no_emails_present(pypi_package_json: MagicMock, analyzer: FakeEmailAnalyzer) -> None:
    """Test when no author_email or maintainer_email is present (should skip).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    analyzer: FakeEmailAnalyzer
        An initialized FakeEmailAnalyzer instance.
    """
    pypi_package_json.package_json = {"info": {"author_email": None, "maintainer_email": None}}
    result, _ = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.SKIP


def test_non_email(pypi_package_json: MagicMock, analyzer: FakeEmailAnalyzer) -> None:
    """Test with a non-parsable email address (should fail).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    analyzer: FakeEmailAnalyzer
        An initialized FakeEmailAnalyzer instance.
    """
    pypi_package_json.package_json = {"info": {"author_email": "not an email", "maintainer_email": "also not an email"}}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL

    # assert types (for mypy)
    assert isinstance(info["non_emails"], list)

    assert "not an email" in info["non_emails"]
    assert "also not an email" in info["non_emails"]


def test_valid_email(pypi_package_json: MagicMock, analyzer: FakeEmailAnalyzer) -> None:
    """Test with valid email address format (should pass).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    analyzer: FakeEmailAnalyzer
        An initialized FakeEmailAnalyzer instance.
    """
    pypi_package_json.package_json = {
        "info": {
            "author_email": "test.email.zwiusiubwq@gmail.com",
            "maintainer_email": "test.email.fqnmwbsxca@gmail.com",
        }
    }
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS

    # assert types (for mypy)
    assert isinstance(info["valid_emails"], list)

    assert "test.email.zwiusiubwq@gmail.com" in info["valid_emails"]
    assert "test.email.fqnmwbsxca@gmail.com" in info["valid_emails"]


def test_get_emails(analyzer: FakeEmailAnalyzer) -> None:
    """Test the get_emails method extracts emails from text correctly.

    analyzer: FakeEmailAnalyzer
        An initialized FakeEmailAnalyzer instance.
    """
    email_field = "test@example.com, Another User <anotheruser@example.org>, please also email me@example.net thanks!"
    expected = ["test@example.com", "anotheruser@example.org", "me@example.net"]
    assert analyzer.get_emails(email_field) == expected

    email_field_no_email = "this is not an email"
    assert analyzer.get_emails(email_field_no_email) == []

    email_field_empty = ""
    assert analyzer.get_emails(email_field_empty) == []
