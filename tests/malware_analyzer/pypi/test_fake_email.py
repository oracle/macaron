# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the FakeEmailAnalyzer heuristic."""


from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.fake_email import FakeEmailAnalyzer
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset


@pytest.fixture(name="analyzer")
def analyzer_() -> FakeEmailAnalyzer:
    """Pytest fixture to create a FakeEmailAnalyzer instance."""
    return FakeEmailAnalyzer()


@pytest.fixture(name="pypi_package_json_asset_mock")
def pypi_package_json_asset_mock_() -> MagicMock:
    """Pytest fixture for a mock PyPIPackageJsonAsset."""
    mock_asset = MagicMock(spec=PyPIPackageJsonAsset)
    mock_asset.package_json = {}
    return mock_asset


def test_analyze_skip_no_emails_present(analyzer: FakeEmailAnalyzer, pypi_package_json_asset_mock: MagicMock) -> None:
    """Test the analyzer skips if no author_email or maintainer_email is present."""
    pypi_package_json_asset_mock.package_json = {"info": {"author_email": None, "maintainer_email": None}}
    result, info = analyzer.analyze(pypi_package_json_asset_mock)
    assert result == HeuristicResult.SKIP
    assert info["message"] == "No author or maintainer email available."


def test_analyze_raises_error_for_missing_info_key(
    analyzer: FakeEmailAnalyzer, pypi_package_json_asset_mock: MagicMock
) -> None:
    """Test the analyzer raises an error if the 'info' key is missing in the PyPI data."""
    pypi_package_json_asset_mock.package_json = {}  # No 'info' key
    with pytest.raises(HeuristicAnalyzerValueError) as exc_info:
        analyzer.analyze(pypi_package_json_asset_mock)
    assert "No package info available." in str(exc_info.value)


def test_analyze_fail_no_email_found_in_field(
    analyzer: FakeEmailAnalyzer, pypi_package_json_asset_mock: MagicMock
) -> None:
    """Test the analyzer fails if an email field does not contain a parsable email address."""
    pypi_package_json_asset_mock.package_json = {"info": {"author_email": "not an email", "maintainer_email": None}}
    result, info = analyzer.analyze(pypi_package_json_asset_mock)
    assert result == HeuristicResult.FAIL
    assert info == {"message": "no emails found in the email field"}


def test_analyze_fail_invalid_email(analyzer: FakeEmailAnalyzer, pypi_package_json_asset_mock: MagicMock) -> None:
    """Test analyzer fails if the email field contains an invalid email format."""
    invalid_email = "user@example"
    pypi_package_json_asset_mock.package_json = {"info": {"author_email": invalid_email, "maintainer_email": None}}

    result, info = analyzer.analyze(pypi_package_json_asset_mock)
    assert result == HeuristicResult.FAIL
    assert info == {"message": "no emails found in the email field"}


def test_analyze_pass_only_maintainer_email_valid(
    analyzer: FakeEmailAnalyzer, pypi_package_json_asset_mock: MagicMock
) -> None:
    """Test the analyzer passes if only a valid maintainer_email is present and deliverability is not checked."""
    email = "maintainer@example.net"
    pypi_package_json_asset_mock.package_json = {"info": {"author_email": None, "maintainer_email": email}}
    result, info = analyzer.analyze(pypi_package_json_asset_mock)

    if analyzer.check_deliverability:
        assert result == HeuristicResult.FAIL
        assert info == {"invalid_email": email}
        return

    assert result == HeuristicResult.PASS
    assert info["validated_emails"] == [
        {"normalized": "maintainer@example.net", "local_part": "maintainer", "domain": "example.net"}
    ]


def test_analyze_pass_both_emails_valid(analyzer: FakeEmailAnalyzer, pypi_package_json_asset_mock: MagicMock) -> None:
    """Test the analyzer passes if both emails are valid and deliverability is not checked."""
    author_email = "example@gmail.com"
    author_local_part, author_domain = author_email.split("@")
    maintainer_email = "maintainer@example.net"
    maintainer_local_part, maintainer_domain = maintainer_email.split("@")

    pypi_package_json_asset_mock.package_json = {
        "info": {"author_email": author_email, "maintainer_email": maintainer_email}
    }
    result, info = analyzer.analyze(pypi_package_json_asset_mock)
    if analyzer.check_deliverability:
        assert result == HeuristicResult.FAIL
        assert info == {"invalid_email": maintainer_email}
        return

    assert result == HeuristicResult.PASS

    validated_emails = info.get("validated_emails")
    assert isinstance(validated_emails, list)
    assert len(validated_emails) == 2
    assert {"normalized": author_email, "local_part": author_local_part, "domain": author_domain} in validated_emails
    assert {
        "normalized": maintainer_email,
        "local_part": maintainer_local_part,
        "domain": maintainer_domain,
    } in validated_emails


def test_is_valid_email_failure(analyzer: FakeEmailAnalyzer) -> None:
    """Test is_valid_email returns None on failure."""
    result = analyzer.is_valid_email("invalid-email")
    assert result is None


def test_get_emails(analyzer: FakeEmailAnalyzer) -> None:
    """Test the get_emails method."""
    email_field = "test@example.com, another test <another@example.org>"
    expected = ["test@example.com", "another@example.org"]
    assert analyzer.get_emails(email_field) == expected

    email_field_no_email = "this is not an email"
    assert analyzer.get_emails(email_field_no_email) == []

    email_field_empty = ""
    assert analyzer.get_emails(email_field_empty) == []
