# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for suspicious setup.py heuristic."""
from unittest.mock import MagicMock, patch

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.sourcecode.suspicious_setup import SuspiciousSetupAnalyzer
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIRegistry


def test_analyze_skip() -> None:
    """
    Test to ensure the URL of the source distribution is missing.

    The heuristic analyzer should return SKIP if the URL is not present.
    """
    mock_pypi_registry = MagicMock(spec=PyPIRegistry)
    mock_pypi_registry.get_sourcecode_url.return_value = None

    analyzer = SuspiciousSetupAnalyzer()

    result, data = analyzer.analyze(mock_pypi_registry)
    assert result == HeuristicResult.SKIP
    assert not data


def test_analyze_fail() -> None:
    """
    Test to ensure that setup.py includes a suspicious import (base64).

    The heuristic analyzer should return FAIL if the suspicious import is found.
    """
    mock_pypi_registry = MagicMock(spec=PyPIRegistry)
    mock_pypi_registry.get_sourcecode_url.return_value = "http://example.com/sourcecode.tar.gz"

    analyzer = SuspiciousSetupAnalyzer()

    with patch.object(analyzer, "_get_setup_source_code", return_value="import base64\n"):
        result, data = analyzer.analyze(mock_pypi_registry)

    # Assert that the result is FAIL and the data contains the imported module
    assert result == HeuristicResult.FAIL
    assert "base64" in data["import_module"]


def test_analyze_no_suspicious_import() -> None:
    """
    Test to ensure that setup.py does not include suspicious imports.

    The heuristic analyzer should return PASS if no suspicious imports are found.
    """
    mock_pypi_registry = MagicMock(spec=PyPIRegistry)
    mock_pypi_registry.get_sourcecode_url.return_value = "http://example.com/sourcecode.tar.gz"

    analyzer = SuspiciousSetupAnalyzer()

    with patch.object(analyzer, "_get_setup_source_code", return_value="import random\n"):
        result, data = analyzer.analyze(mock_pypi_registry)

    # Assert that the result is PASS and the data contains the imported module
    assert result == HeuristicResult.PASS
    assert "random" in data["import_module"]
