# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for suspicious setup.py heuristic."""
from unittest.mock import MagicMock, patch

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.sourcecode.suspicious_setup import SuspiciousSetupAnalyzer
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset


def test_analyze_skip() -> None:
    """Test to ensure the URL of the source distribution is missing.

    The heuristic analyzer should return SKIP if the URL is not present.
    """
    mock_pypi_package = MagicMock(spec=PyPIPackageJsonAsset)
    mock_pypi_package.get_sourcecode_url.return_value = None

    analyzer = SuspiciousSetupAnalyzer()

    result, data = analyzer.analyze(mock_pypi_package)
    assert result == HeuristicResult.SKIP
    assert not data


def test_analyze_fail() -> None:
    """Test to ensure that setup.py includes a suspicious import (base64).

    The heuristic analyzer should return FAIL if the suspicious import is found.
    """
    mock_pypi_package = MagicMock(spec=PyPIPackageJsonAsset)
    mock_pypi_package.get_sourcecode_url.return_value = "http://example.com/sourcecode.tar.gz"

    analyzer = SuspiciousSetupAnalyzer()

    with patch.object(analyzer, "_get_setup_source_code", return_value="import base64\n"):
        result, data = analyzer.analyze(mock_pypi_package)

    # Assert that the result is FAIL and the data contains the imported module.
    assert result == HeuristicResult.FAIL
    assert isinstance(data["import_module"], list)
    assert "base64" in data["import_module"]


def test_analyze_no_suspicious_import() -> None:
    """Test to ensure that setup.py does not include suspicious imports.

    The heuristic analyzer should return PASS if no suspicious imports are found.
    """
    mock_pypi_package = MagicMock(spec=PyPIPackageJsonAsset)
    mock_pypi_package.get_sourcecode_url.return_value = "http://example.com/sourcecode.tar.gz"

    analyzer = SuspiciousSetupAnalyzer()

    with patch.object(analyzer, "_get_setup_source_code", return_value="import random\n"):
        result, data = analyzer.analyze(mock_pypi_package)

    # Assert that the result is PASS and the data contains the imported module.
    assert result == HeuristicResult.PASS
    assert isinstance(data["import_module"], list)
    assert "random" in data["import_module"]


@pytest.fixture(name="sample_code")
def sample_code_() -> str:
    """Return a block of sample source code."""
    return """
import re
import os, sys
import requests as r
import logging as l,pathlib as p# this is a comment
from packageurl import PackageURL
from macaron.output_reporter.results import Record, Report, SCMStatus
from ..test import test as t1
from .... import nothing
from .test.test2.test3 import test as t1000, test2 as t9000,test4,test5 as t1

def test():
    pass
    """


@pytest.fixture(name="sample_code_imports")
def sample_code_imports_() -> list[str]:
    """Return the list of imports that match the sample source code."""
    return [
        "re",
        "os",
        "sys",
        "requests",
        "logging",
        "pathlib",
        "packageurl",
        "packageurl.PackageURL",
        "macaron.output_reporter.results",
        "macaron.output_reporter.results.Record",
        "macaron.output_reporter.results.Report",
        "macaron.output_reporter.results.SCMStatus",
        "..test",
        "..test.test",
        ".test.test2.test3",
        ".test.test2.test3.test",
        ".test.test2.test3.test2",
        ".test.test2.test3.test4",
        ".test.test2.test3.test5",
    ]


def test_ast_import_extraction(sample_code: str, sample_code_imports: list[str]) -> None:
    """Test the extraction of imports using the AST method."""
    parsed_imports = SuspiciousSetupAnalyzer().extract_from_ast(sample_code)
    assert len(parsed_imports) == len(sample_code_imports)
    assert bool(parsed_imports.intersection(sample_code_imports))


def test_re_import_extraction(sample_code: str, sample_code_imports: list[str]) -> None:
    """Test the extraction of imports using the regular expression method."""
    parsed_imports = SuspiciousSetupAnalyzer().extract_from_lines(sample_code)
    assert len(parsed_imports) == len(sample_code_imports)
    assert bool(parsed_imports.intersection(sample_code_imports))
