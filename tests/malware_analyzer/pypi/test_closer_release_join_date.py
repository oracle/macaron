# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for closer release join date heuristic."""
from datetime import datetime

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult


def test_analyze_pass(setup_closer_release_join_date_analyzer: tuple) -> None:
    """Test analyze method when the heuristic should pass.

    Parameters
    ----------
    setup_closer_release_join_date_analyzer: tuple
        The setup fixture returning the analyzer and api_client.
    """
    analyzer, api_client = setup_closer_release_join_date_analyzer

    # Set up mock return values
    api_client.get_maintainer_of_package.return_value = ["maintainer1", "maintainer2"]
    api_client.get_maintainer_join_date.side_effect = [datetime(2018, 1, 1), datetime(2019, 1, 1)]
    api_client.get_latest_release_upload_time.return_value = "2022-06-20T12:00:00"

    # Call the method
    result, detail_info = analyzer.analyze(api_client)

    # Assert
    assert result == HeuristicResult.PASS
    assert "maintainers_join_date" in detail_info
    assert "latest_release_date" in detail_info


def test_analyze_fail(setup_closer_release_join_date_analyzer: tuple) -> None:
    """Test analyze method when the heuristic should fail.

    Parameters
    ----------
    setup_closer_release_join_date_analyzer: tuple
        The setup fixture returning the analyzer and api_client.
    """
    analyzer, api_client = setup_closer_release_join_date_analyzer

    # Set up mock return values
    api_client.get_maintainer_of_package.return_value = ["maintainer1"]
    api_client.get_maintainer_join_date.side_effect = [datetime(2022, 6, 18)]
    api_client.get_latest_release_upload_time.return_value = "2022-06-20T12:00:00"

    # Call the method
    result, detail_info = analyzer.analyze(api_client)

    # Assert
    assert result == HeuristicResult.FAIL
    assert "maintainers_join_date" in detail_info
    assert "latest_release_date" in detail_info


def test_analyze_skip(setup_closer_release_join_date_analyzer: tuple) -> None:
    """Test analyze method when the heuristic should be skipped.

    Parameters
    ----------
    setup_closer_release_join_date_analyzer: tuple
        The setup fixture returning the analyzer and api_client.
    """
    analyzer, api_client = setup_closer_release_join_date_analyzer

    # Set up mock return values
    api_client.get_maintainer_of_package.return_value = None
    api_client.get_latest_release_upload_time.return_value = "2022-06-20T12:00:00"

    # Call the method
    result, detail_info = analyzer.analyze(api_client)

    # Assert
    assert result == HeuristicResult.SKIP
    assert "maintainers_join_date" in detail_info
    assert "latest_release_date" in detail_info
