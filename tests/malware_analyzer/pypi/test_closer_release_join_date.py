# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for closer release join date heuristic."""
from datetime import datetime
from unittest.mock import MagicMock

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.closer_release_join_date import CloserReleaseJoinDateAnalyzer


def test_analyze_pass(pypi_package_json: MagicMock) -> None:
    """Test analyze method when the heuristic should pass."""
    analyzer = CloserReleaseJoinDateAnalyzer()

    # Set up mock return values.
    pypi_package_json.pypi_registry.get_maintainers_of_package.return_value = ["maintainer1", "maintainer2"]
    pypi_package_json.pypi_registry.get_maintainer_join_date.side_effect = [datetime(2018, 1, 1), datetime(2019, 1, 1)]
    pypi_package_json.get_latest_release_upload_time.return_value = "2022-06-20T12:00:00"

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.PASS
    assert "maintainers_join_date" in detail_info
    assert "latest_release_date" in detail_info


def test_analyze_process(pypi_package_json: MagicMock) -> None:
    """Test analyze method when the heuristic should fail."""
    analyzer = CloserReleaseJoinDateAnalyzer()

    # Set up mock return values.
    pypi_package_json.pypi_registry.get_maintainers_of_package.return_value = ["maintainer1"]
    pypi_package_json.pypi_registry.get_maintainer_join_date.side_effect = [datetime(2022, 6, 18)]
    pypi_package_json.get_latest_release_upload_time.return_value = "2022-06-20T12:00:00"

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.FAIL
    assert "maintainers_join_date" in detail_info
    assert "latest_release_date" in detail_info


def test_analyze_skip(pypi_package_json: MagicMock) -> None:
    """Test analyze method when the heuristic should be skipped."""
    analyzer = CloserReleaseJoinDateAnalyzer()

    # Set up mock return values.
    pypi_package_json.pypi_registry.get_maintainers_of_package.return_value = None
    pypi_package_json.get_latest_release_upload_time.return_value = "2022-06-20T12:00:00"

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.SKIP
    assert "maintainers_join_date" in detail_info
    assert "latest_release_date" in detail_info
