# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the SimilarProjectAnalyzer heuristic."""
# pylint: disable=redefined-outer-name

import os
from collections.abc import Callable, Generator
from unittest.mock import MagicMock, patch

import pytest

from macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects import SimilarProjectAnalyzer

TEST_SDIST_LINK = (
    "https://inspector.pypi.io/project/posthog/6.7.4/packages/0f/40/"
    "d7f585e09e47f492ebaeb8048a8e2ce5d9f49a3896856a7a975cbc1484fa/posthog-6.7.4.tar.gz/"
)
TEST_WHL_LINK = (
    "https://inspector.pypi.io/project/posthog/6.7.4/packages/bb/95/"
    "e795059ef73d480a7f11f1be201087f65207509525920897fb514a04914c/posthog-6.7.4-py3-none-any.whl/"
)


@pytest.fixture()
def mock_send_get_http_raw() -> Generator[Callable]:
    """Mock the send_get_http_raw function for inspector HTML.

    Returns
    -------
    Generator[Callable, None, None]
        A mocked send_get_http_raw function that can just be included as a function parameter to work.
    """
    html_samples_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), "resources", "inspector_html_samples", "posthog"
    )

    with open(os.path.join(html_samples_path, "posthog-6.7.4-tar-inspector.html"), "rb") as file:
        tarfile_inspector = file.read()
    with open(os.path.join(html_samples_path, "posthog-6.7.4-whl-inspector.html"), "rb") as file:
        wheel_inspector = file.read()

    tarfile_response = MagicMock()
    tarfile_response.content = tarfile_inspector
    wheel_response = MagicMock()
    wheel_response.content = wheel_inspector

    def mock_send_get_http_raw_side_effect(url: str) -> bytes | None:
        if url == TEST_SDIST_LINK:
            return tarfile_response
        if url == TEST_WHL_LINK:
            return wheel_response
        return None

    with patch(
        "macaron.slsa_analyzer.package_registry.pypi_registry.send_get_http_raw",
        side_effect=mock_send_get_http_raw_side_effect,
    ) as mock_send_get_http_raw:
        yield mock_send_get_http_raw


@pytest.fixture()
def analyzer() -> SimilarProjectAnalyzer:
    """Pytest fixture to create a SimilarProjectAnalyzer instance."""
    analyzer_instance = SimilarProjectAnalyzer()
    return analyzer_instance


def test_get_normalized_structure(
    analyzer: SimilarProjectAnalyzer,
    mock_send_get_http_raw: Callable,  # pylint: disable=unused-argument
    pypi_package_json: MagicMock,
) -> None:
    """Test the get_normalized_structure function to ensure it extracts the same structure for a wheel and tarball.

    Parameters
    ----------
    pypi_package_json: PyPIPackageJsonAsset
        The PyPI package JSON asset object.
    analyzer: SimilarProjectAnalyzer
        An instantiated similar projects analyzer.
    mock_send_get_http_raw: Callable
        A mocked send_get_http_raw function to return inspector html.
    """
    # This structure is all files in the PyPI inspector HTML page that are python files, minus setup.py
    # and the package name, so this structure is now comparable to some other project that would have these
    # same files, but with a different name
    expected_structure: set[str] = {
        "/__init__.py",
        "/ai/__init__.py",
        "/ai/anthropic/__init__.py",
        "/ai/anthropic/anthropic.py",
        "/ai/anthropic/anthropic_async.py",
        "/ai/anthropic/anthropic_converter.py",
        "/ai/anthropic/anthropic_providers.py",
        "/ai/gemini/__init__.py",
        "/ai/gemini/gemini.py",
        "/ai/gemini/gemini_converter.py",
        "/ai/langchain/__init__.py",
        "/ai/langchain/callbacks.py",
        "/ai/openai/__init__.py",
        "/ai/openai/openai.py",
        "/ai/openai/openai_async.py",
        "/ai/openai/openai_converter.py",
        "/ai/openai/openai_providers.py",
        "/ai/sanitization.py",
        "/ai/types.py",
        "/ai/utils.py",
        "/args.py",
        "/client.py",
        "/consumer.py",
        "/contexts.py",
        "/exception_capture.py",
        "/exception_utils.py",
        "/feature_flags.py",
        "/integrations/__init__.py",
        "/integrations/django.py",
        "/poller.py",
        "/request.py",
        "/test/__init__.py",
        "/test/test_before_send.py",
        "/test/test_client.py",
        "/test/test_consumer.py",
        "/test/test_contexts.py",
        "/test/test_exception_capture.py",
        "/test/test_feature_flag.py",
        "/test/test_feature_flag_result.py",
        "/test/test_feature_flags.py",
        "/test/test_module.py",
        "/test/test_request.py",
        "/test/test_size_limited_dict.py",
        "/test/test_types.py",
        "/test/test_utils.py",
        "/types.py",
        "/utils.py",
        "/version.py",
    }

    pypi_package_json.component_version = "6.7.4"
    pypi_package_json.component_name = "posthog"
    pypi_package_json.inspector_asset.package_sdist_link = TEST_SDIST_LINK
    pypi_package_json.inspector_asset.package_link_reachability = {TEST_SDIST_LINK: True}
    pypi_package_json.inspector_asset.package_whl_links = []
    sdist_structure = analyzer.get_normalized_structure(pypi_package_json)

    pypi_package_json.inspector_asset.package_sdist_link = ""
    pypi_package_json.inspector_asset.package_whl_links = [TEST_WHL_LINK]
    pypi_package_json.inspector_asset.package_link_reachability = {TEST_WHL_LINK: True}
    wheel_structure = analyzer.get_normalized_structure(pypi_package_json)

    assert sdist_structure == wheel_structure
    assert sdist_structure == expected_structure
    # sdist == wheel_structure, sdist == expected_structure, so don't quite need this, but just for completeness
    assert wheel_structure == expected_structure
