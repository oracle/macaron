# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the SimilarProjectAnalyzer heuristic."""
# pylint: disable=redefined-outer-name

from unittest.mock import MagicMock, patch

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects import SimilarProjectAnalyzer


@pytest.fixture()
def analyzer() -> SimilarProjectAnalyzer:
    """Pytest fixture to create a SimilarProjectAnalyzer instance."""
    analyzer_instance = SimilarProjectAnalyzer()
    return analyzer_instance


def test_analyze_skip_no_similar_packages(analyzer: SimilarProjectAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer skips when the maintainers of the package do not maintain any other packages."""
    pypi_package_json.component_name = "test_package"
    with (
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure_hash"
        ) as mock_get_structure_hash,
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_packages"
        ) as mock_get_packages,
    ):
        mock_get_structure_hash.return_value = "dummy_hash"
        mock_get_packages.return_value = []
        result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.SKIP
    assert "the maintainers of test_package do not maintain any other packages." in str(info["message"])


def test_analyze_fail_similar_project_found(analyzer: SimilarProjectAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when a similar project with the same structure hash is found."""
    pypi_package_json.component_name = "test_package"
    with (
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure_hash"
        ) as mock_get_structure_hash,
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_packages"
        ) as mock_get_packages,
    ):
        mock_get_structure_hash.return_value = "same_hash"
        mock_get_packages.return_value = ["similar_package"]
        result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["similar_package"] == "similar_package"


def test_analyze_pass_no_similar_hash(analyzer: SimilarProjectAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when no similar project has the same structure hash."""
    pypi_package_json.component_name = "test_package"
    with (
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure_hash"
        ) as mock_get_structure_hash,
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_packages"
        ) as mock_get_packages,
    ):
        mock_get_structure_hash.side_effect = ["mock_hash1", "mock_hash2"]
        mock_get_packages.return_value = ["similar_package"]
        result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info == {}


def test_get_maintainers_failure(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_maintainers method with a failed response."""
    maintainers = analyzer.get_maintainers("test_package")
    assert maintainers == []


def test_get_packages_by_user_failure(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_packages_by_user method with a failed response."""
    packages = analyzer.get_packages_by_user("test_user")
    assert packages == []


def test_get_packages(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_packages method."""
    with (
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_maintainers"
        ) as mock_get_maintainers,
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_packages_by_user"
        ) as mock_get_packages_by_user,
    ):
        mock_get_maintainers.return_value = ["user1", "user2"]
        mock_get_packages_by_user.side_effect = [["package1", "package2"], ["package2", "package3"]]
        packages = analyzer.get_packages("test_package")
        assert set(packages) == {"package1", "package2", "package3"}


def test_get_packages_excludes_self(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_packages method excludes the package itself."""
    with (
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_maintainers"
        ) as mock_get_maintainers,
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_packages_by_user"
        ) as mock_get_packages_by_user,
    ):
        mock_get_maintainers.return_value = ["user1"]
        mock_get_packages_by_user.return_value = ["test_package", "package1"]
        packages = analyzer.get_packages("test_package")
        assert packages == ["package1"]


def test_fetch_sdist_url_success(analyzer: SimilarProjectAnalyzer) -> None:
    """Test fetch_sdist_url method with a successful response."""
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "info": {"version": "1.0.0"},
            "releases": {"1.0.0": [{"packagetype": "sdist", "url": "http://example.com/sdist.tar.gz"}]},
        }
        mock_get.return_value = mock_response
        url = analyzer.fetch_sdist_url("test_package")
        assert url == "http://example.com/sdist.tar.gz"


def test_fetch_sdist_url_no_sdist(analyzer: SimilarProjectAnalyzer) -> None:
    """Test fetch_sdist_url method when no sdist is found."""
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "info": {"version": "1.0.0"},
            "releases": {"1.0.0": [{"packagetype": "bdist", "url": "http://example.com/bdist.whl"}]},
        }
        mock_get.return_value = mock_response
        url = analyzer.fetch_sdist_url("test_package")
        assert url == ""


def test_fetch_sdist_url_version_specified(analyzer: SimilarProjectAnalyzer) -> None:
    """Test fetch_sdist_url method with a specific version."""
    with patch("requests.get") as mock_get:
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "info": {"version": "1.0.0"},
            "releases": {
                "0.9.0": [{"packagetype": "sdist", "url": "http://example.com/sdist_0.9.tar.gz"}],
                "1.0.0": [{"packagetype": "sdist", "url": "http://example.com/sdist.tar.gz"}],
            },
        }
        mock_get.return_value = mock_response
        url = analyzer.fetch_sdist_url("test_package", version="0.9.0")
        assert url == "http://example.com/sdist_0.9.tar.gz"


def test_get_structure_hash(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_structure_hash method."""
    with (
        patch(
            "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.fetch_sdist_url"
        ) as mock_fetch_sdist_url,
        patch("requests.get") as mock_get,
        patch("tarfile.open") as mock_tarfile_open,
    ):

        mock_fetch_sdist_url.return_value = "http://example.com/sdist.tar.gz"
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.raw = MagicMock()
        mock_get.return_value = mock_response

        mock_tarfile = MagicMock()
        mock_tarfile_open.return_value = mock_tarfile

        member1 = MagicMock()
        member1.name = "test_package-1.0.0/file1.py"
        member1.isdir.return_value = False

        member2 = MagicMock()
        member2.name = "test_package-1.0.0/dir/file2.py"
        member2.isdir.return_value = False

        member3 = MagicMock()
        member3.name = "test_package-1.0.0/dir"
        member3.isdir.return_value = True

        mock_tarfile.__iter__.return_value = [member1, member2, member3]
        mock_tarfile.close.return_value = None

        structure_hash = analyzer.get_structure_hash("test_package")

        assert isinstance(structure_hash, str)
        assert len(structure_hash) == 64  # SHA256 hexdigest length.
