# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the SimilarProjectAnalyzer heuristic."""
# pylint: disable=redefined-outer-name

from unittest.mock import MagicMock, patch

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects import SimilarProjectAnalyzer


@pytest.fixture()
def analyzer() -> SimilarProjectAnalyzer:
    """Pytest fixture to create a SimilarProjectAnalyzer instance."""
    analyzer_instance = SimilarProjectAnalyzer()
    return analyzer_instance


def test_analyze_skip_no_target_hash(analyzer: SimilarProjectAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer skips when the target package has no structure hash."""
    pypi_package_json.component_name = "test_package"
    with patch(
        "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure_hash"
    ) as mock_get_structure_hash:
        mock_get_structure_hash.return_value = ""
        result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.SKIP
    assert info == {}


def test_analyze_fail_similar_project_found(analyzer: SimilarProjectAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when a similar project with the same structure hash is found."""
    pypi_package_json.component_name = "test_package"
    pypi_package_json.pypi_registry.get_maintainers_of_package.return_value = ["user1"]
    pypi_package_json.pypi_registry.get_packages_by_username.return_value = ["similar_package"]

    with patch(
        "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure_hash"
    ) as mock_get_structure_hash:
        mock_get_structure_hash.return_value = "same_hash"
        result, info = analyzer.analyze(pypi_package_json)

    assert result == HeuristicResult.FAIL
    assert info["similar_package"] == "similar_package"


def test_analyze_fail_when_package_compares_to_itself(
    analyzer: SimilarProjectAnalyzer, pypi_package_json: MagicMock
) -> None:
    """Test the analyzer passes when a package is compared against itself."""
    pypi_package_json.component_name = "test_package"
    pypi_package_json.pypi_registry.get_maintainers_of_package.return_value = ["user1"]
    pypi_package_json.pypi_registry.get_packages_by_username.return_value = ["test_package", "other_package"]

    with patch(
        "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure_hash"
    ) as mock_get_structure_hash:
        mock_get_structure_hash.side_effect = ["hash1", "hash2"]  # test_package, other_package
        result, _ = analyzer.analyze(pypi_package_json)

    assert result == HeuristicResult.PASS


def test_analyze_pass_no_similar_hash(analyzer: SimilarProjectAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when no similar project has the same structure hash."""
    pypi_package_json.component_name = "test_package"
    pypi_package_json.pypi_registry.get_maintainers_of_package.return_value = ["user1"]
    pypi_package_json.pypi_registry.get_packages_by_username.return_value = ["other_package"]

    with patch(
        "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure_hash"
    ) as mock_get_structure_hash:
        mock_get_structure_hash.side_effect = ["hash1", "hash2"]
        result, _ = analyzer.analyze(pypi_package_json)

    assert result == HeuristicResult.PASS


def test_get_url_success(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_url method with a successful response."""
    mock_data = {
        "urls": [
            {"packagetype": "bdist_wheel", "url": "http://example.com/wheel.whl"},
            {"packagetype": "sdist", "url": "http://example.com/sdist.tar.gz"},
        ]
    }
    with patch("macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.send_get_http") as mock_send_get:
        mock_send_get.return_value = mock_data
        url = analyzer.get_url("test_package")
        assert url == "http://example.com/sdist.tar.gz"


def test_get_url_no_sdist(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_url method when no sdist is found."""
    mock_data = {"urls": [{"packagetype": "bdist_wheel", "url": "http://example.com/wheel.whl"}]}
    with patch("macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.send_get_http") as mock_send_get:
        mock_send_get.return_value = mock_data
        url = analyzer.get_url("test_package")
        assert url is None


def test_get_url_request_fails(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_url method when the HTTP request fails."""
    with patch("macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.send_get_http") as mock_send_get:
        mock_send_get.return_value = None
        url = analyzer.get_url("test_package")
        assert url is None


def test_get_structure_hash(analyzer: SimilarProjectAnalyzer) -> None:
    """Test get_structure_hash method."""
    with patch(
        "macaron.malware_analyzer.pypi_heuristics.metadata.similar_projects.SimilarProjectAnalyzer.get_structure"
    ) as mock_get_structure:
        mock_get_structure.return_value = [
            "test_package-1.0/setup.py",
            "test_package-1.0/test_package/__init__.py",
        ]

        structure_hash = analyzer.get_structure_hash("test_package")

        assert isinstance(structure_hash, str)
        assert len(structure_hash) == 64

        # Verify normalization
        mock_get_structure.return_value = [
            "other_package-1.0/other_package/__init__.py",
            "other_package-1.0/setup.py",
        ]
        structure_hash2 = analyzer.get_structure_hash("other_package")
        assert structure_hash == structure_hash2
