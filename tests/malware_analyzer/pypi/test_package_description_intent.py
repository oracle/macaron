# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the PackageDescriptionIntentAnalyzer heuristic."""

from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.package_description_intent import (
    PackageDescriptionIntentAnalyzer,
)


@pytest.fixture(name="analyzer")
def analyzer_() -> PackageDescriptionIntentAnalyzer:
    """Pytest fixture to create an PackageDescriptionIntentAnalyzer instance."""
    return PackageDescriptionIntentAnalyzer()


def test_no_info(analyzer: PackageDescriptionIntentAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer raises an error when no package info is found."""
    pypi_package_json.package_json = {}
    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


@pytest.mark.parametrize(
    ("metadata", "expected_result"),
    [
        pytest.param(
            {"description": "A harmless package to prevent typosquatting attacks"},
            HeuristicResult.PASS,
            id="test_harmless_package_description",
        ),
        pytest.param(
            {"summary": "placeholder package to prevent dependency confusion attacks"},
            HeuristicResult.PASS,
            id="test_harmless_package_summary",
        ),
        pytest.param(
            {"description": "A regular public package", "summary": "does regular things"},
            HeuristicResult.FAIL,
            id="test_no_intention",
        ),
    ],
)
def test_analyze_scenarios(
    analyzer: PackageDescriptionIntentAnalyzer,
    pypi_package_json: MagicMock,
    metadata: dict,
    expected_result: HeuristicResult,
) -> None:
    """Test the analyzer with various metadata scenarios."""
    pypi_package_json.package_json = {"info": metadata}
    result, _ = analyzer.analyze(pypi_package_json)
    assert result == expected_result
