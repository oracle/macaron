# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.unchanged_release import UnchangedReleaseAnalyzer


def test_changed_releases(pypi_package_json: MagicMock) -> None:
    """Test multiple releases with different digests and clear changes (should pass).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = UnchangedReleaseAnalyzer()

    # Set up mock return values.
    pypi_package_json.get_releases.return_value = {
        "v1.0": [{"digests": {"sha256": "digest1"}}],
        "v1.1": [{"digests": {"sha256": "digest2"}}],
        "v1.2": [{"digests": {"sha256": "digest3"}}],
    }

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.PASS
    assert not detail_info


def test_unchanged_release(pypi_package_json: MagicMock) -> None:
    """Test multiple releases with a duplicate digest and unchanged release (should fail)."""
    analyzer = UnchangedReleaseAnalyzer()

    # Set up mock return values.
    pypi_package_json.get_releases.return_value = {
        "v1.0": [{"digests": {"sha256": "digest1"}}],
        "v1.1": [{"digests": {"sha256": "digest1"}}],  # Duplicate digest.
        "v1.2": [{"digests": {"sha256": "digest2"}}],
    }

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.FAIL
    assert not detail_info


def test_single_release(pypi_package_json: MagicMock) -> None:
    """Test a single release (should skip).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = UnchangedReleaseAnalyzer()

    # Set up mock return values.
    pypi_package_json.get_releases.return_value = {"v1.0": [{"digests": {"sha256": "digest1"}}]}

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.SKIP
    assert not detail_info


def test_no_digests(pypi_package_json: MagicMock) -> None:
    """Test the digest information being unavailable (should error).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = UnchangedReleaseAnalyzer()

    # Set up mock return values.
    pypi_package_json.get_releases.return_value = None

    # Call the method.
    with pytest.raises(HeuristicAnalyzerValueError):
        _ = analyzer.analyze(pypi_package_json)
