# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult


def test_analyze_pass(setup_unchanged_release_analyzer: tuple) -> None:
    """Test the analyze method returning PASS.

    Parameters
    ----------
    setup_unchanged_release_analyzer: tuple
        Fixture for UnchangedReleaseAnalyzer and mocked PyPIRegistry.
    """
    analyzer, api_client = setup_unchanged_release_analyzer

    # Set up mock return values.
    api_client.get_releases.return_value = {
        "v1.0": [{"digests": {"sha256": "digest1"}}],
        "v1.1": [{"digests": {"sha256": "digest2"}}],
        "v1.2": [{"digests": {"sha256": "digest3"}}],
    }

    # Call the method.
    result, detail_info = analyzer.analyze(api_client)

    # Assert.
    assert result == HeuristicResult.PASS
    assert detail_info == {}


def test_analyze_fail(setup_unchanged_release_analyzer: tuple) -> None:
    """Test the analyze method returning FAIL.

    Parameters
    ----------
    setup_unchanged_release_analyzer: tuple
        Fixture for UnchangedReleaseAnalyzer and mocked PyPIRegistry.
    """
    analyzer, api_client = setup_unchanged_release_analyzer

    # Set up mock return values.
    api_client.get_releases.return_value = {
        "v1.0": [{"digests": {"sha256": "digest1"}}],
        "v1.1": [{"digests": {"sha256": "digest1"}}],  # Duplicate digest.
        "v1.2": [{"digests": {"sha256": "digest2"}}],
    }

    # Call the method.
    result, detail_info = analyzer.analyze(api_client)

    # Assert.
    assert result == HeuristicResult.FAIL
    assert detail_info == {}


def test_analyze_skip(setup_unchanged_release_analyzer: tuple) -> None:
    """Test the analyze method returning SKIP.

    Parameters
    ----------
    setup_unchanged_release_analyzer: tuple
        Fixture for UnchangedReleaseAnalyzer and mocked PyPIRegistry.
    """
    analyzer, api_client = setup_unchanged_release_analyzer

    # Set up mock return values.
    api_client.get_releases.return_value = None

    # Call the method.
    result, detail_info = analyzer.analyze(api_client)

    # Assert.
    assert result == HeuristicResult.SKIP
    assert detail_info == {}
