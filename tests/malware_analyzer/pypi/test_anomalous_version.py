# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting anomalous version numbers"""
from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.anomalous_version import AnomalousVersionAnalyzer, Versioning


def test_analyze_no_information(pypi_package_json: MagicMock) -> None:
    """Test for when there is no release information (should error)

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = AnomalousVersionAnalyzer()

    pypi_package_json.get_releases.return_value = None

    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


def test_analyze_invalid_time(pypi_package_json: MagicMock) -> None:
    """Test for when the supplied upload time does not conform with PEP 440 (should error).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = AnomalousVersionAnalyzer()
    version = "1.1"
    release = {
        version: [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "defa2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3",
                    "md5": "9203bbb130f8ddb38269f4861c170d04",
                    "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
                },
                "downloads": -1,
                "filename": "ttttttttest_nester.py-0.1.0.tar.gz",
                "has_sig": False,
                "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": None,
                "size": 546,
                "upload_time": "September 2 2022 5:42pm 27s",
                "upload_time_iso_8601": "2022-09-02T05:42:27.073842Z",
                "url": "https://files.pythonhosted.org/packages/de/fa/"
                + "2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3/ttttttttest_nester.py-0.1.0.tar.gz",
                "yanked": False,
                "yanked_reason": None,
            }
        ]
    }

    pypi_package_json.get_releases.return_value = release
    pypi_package_json.get_latest_version.return_value = version

    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


def test_analyze_no_time(pypi_package_json: MagicMock) -> None:
    """Test for when there is no supplied upload time (should error).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = AnomalousVersionAnalyzer()
    version = "1.1"
    release = {
        version: [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "defa2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3",
                    "md5": "9203bbb130f8ddb38269f4861c170d04",
                    "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
                },
                "downloads": -1,
                "filename": "ttttttttest_nester.py-0.1.0.tar.gz",
                "has_sig": False,
                "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": None,
                "size": 546,
                "url": "https://files.pythonhosted.org/packages/de/fa/"
                + "2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3/ttttttttest_nester.py-0.1.0.tar.gz",
                "yanked": False,
                "yanked_reason": None,
            }
        ]
    }

    pypi_package_json.get_releases.return_value = release
    pypi_package_json.get_latest_version.return_value = version

    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


@pytest.mark.parametrize(
    ("version", "upload_date", "result", "versioning"),
    [
        pytest.param(
            "2016-10-13", "2016-10-13", HeuristicResult.SKIP, Versioning.INVALID.value, id="test_invalid_version"
        ),
        pytest.param(
            "2016.10.11",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_YYYY.MM.DD_pass",
        ),
        pytest.param(
            "2016.12.10",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_YYYY.DD.MM_pass",
        ),
        pytest.param(
            "16.10.13", "2016-10-13", HeuristicResult.PASS, Versioning.CALENDAR.value, id="test_calendar_YY.DD.MM_pass"
        ),
        pytest.param(
            "16.14.10", "2016-10-13", HeuristicResult.PASS, Versioning.CALENDAR.value, id="test_calendar_YY.MM.DD_pass"
        ),
        pytest.param(
            "10.10.2016",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_MM.DD.YYYY_pass",
        ),
        pytest.param(
            "9.10.2016",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_DD.MM.YYYY_pass",
        ),
        pytest.param(
            "10.15.16", "2016-10-13", HeuristicResult.PASS, Versioning.CALENDAR.value, id="test_calendar_DD.MM.YY_pass"
        ),
        pytest.param(
            "16.10.16", "2016-10-13", HeuristicResult.PASS, Versioning.CALENDAR.value, id="test_calendar_MM.DD.YY_pass"
        ),
        pytest.param(
            "20161011.0",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_YYYYMMDD_pass",
        ),
        pytest.param(
            "20161210.6.1",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_YYYYDDMM_pass",
        ),
        pytest.param(
            "161013.9.0.5",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_YYDDMM_pass",
        ),
        pytest.param(
            "161410.2.5.7",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_YYMMDD_pass",
        ),
        pytest.param(
            "10102016.0",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_MMDDYYYY_pass",
        ),
        pytest.param(
            "09102016",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_DDMMYYYY_pass",
        ),
        pytest.param(
            "101516.5.7", "2016-10-13", HeuristicResult.PASS, Versioning.CALENDAR.value, id="test_calendar_DDMMYY_pass"
        ),
        pytest.param(
            "161016.0.0.0.0",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_MMDDYY_pass",
        ),
        pytest.param(
            "2!16.10.17.2.5.3",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR.value,
            id="test_calendar_epoch_pass",
        ),
        pytest.param(
            "100!2016.10.14",
            "2016-10-13",
            HeuristicResult.FAIL,
            Versioning.CALENDAR.value,
            id="test_calendar_epoch_fail",
        ),
        pytest.param(
            "2016.7.2",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR_SEMANTIC.value,
            id="test_calendar_semantic_pass",
        ),
        pytest.param(
            "2016.100.0",
            "2016-10-13",
            HeuristicResult.FAIL,
            Versioning.CALENDAR_SEMANTIC.value,
            id="test_calendar_semantic_fail",
        ),
        pytest.param(
            "2!2016.1.5.6",
            "2016-10-13",
            HeuristicResult.PASS,
            Versioning.CALENDAR_SEMANTIC.value,
            id="test_calendar_semantic_epoch_pass",
        ),
        pytest.param(
            "100!2016.1",
            "2016-10-13",
            HeuristicResult.FAIL,
            Versioning.CALENDAR_SEMANTIC.value,
            id="test_calendar_semantic_epoch_fail",
        ),
        pytest.param("3.1", "2016-10-13", HeuristicResult.PASS, Versioning.SEMANTIC.value, id="test_semantic_pass"),
        pytest.param("999", "2016-10-13", HeuristicResult.FAIL, Versioning.SEMANTIC.value, id="test_semantic_fail"),
        pytest.param(
            "3!0.1.9999", "2016-10-13", HeuristicResult.PASS, Versioning.SEMANTIC.value, id="test_semantic_epoch_pass"
        ),
        pytest.param(
            "999!0.0.0", "2016-10-13", HeuristicResult.FAIL, Versioning.SEMANTIC.value, id="test_semantic_epoch_fail"
        ),
    ],
)
def test_analyze(
    pypi_package_json: MagicMock, version: str, upload_date: str, result: HeuristicResult, versioning: str
) -> None:
    """
    Generic test for the expected return value of the anomalous version heuristic.

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    version : str
        the version number for the test package.
    upload_date : str
        the date of when the test package was uploaded.
    result : HeuristicResult
        the expected result the heuristic should arrive at.
    versioning : str
        which versioning system the heuristic should have identified.
    """
    analyzer = AnomalousVersionAnalyzer()
    release = {
        version: [
            {
                "comment_text": "",
                "digests": {
                    "blake2b_256": "defa2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3",
                    "md5": "9203bbb130f8ddb38269f4861c170d04",
                    "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
                },
                "downloads": -1,
                "filename": "ttttttttest_nester.py-0.1.0.tar.gz",
                "has_sig": False,
                "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
                "packagetype": "sdist",
                "python_version": "source",
                "requires_python": None,
                "size": 546,
                "upload_time": f"{upload_date}T05:42:27",
                "upload_time_iso_8601": f"{upload_date}T05:42:27.073842Z",
                "url": "https://files.pythonhosted.org/packages/de/fa/"
                + "2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3/ttttttttest_nester.py-0.1.0.tar.gz",
                "yanked": False,
                "yanked_reason": None,
            }
        ]
    }

    pypi_package_json.get_releases.return_value = release
    pypi_package_json.get_latest_version.return_value = version
    expected_result: tuple[HeuristicResult, dict] = (result, {AnomalousVersionAnalyzer.DETAIL_INFO_KEY: versioning})

    actual_result = analyzer.analyze(pypi_package_json)

    assert actual_result == expected_result


def test_multiple_releases(pypi_package_json: MagicMock) -> None:
    """Test when there are multiple releases of the package (should skip).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = AnomalousVersionAnalyzer()
    release_content = [
        {
            "comment_text": "",
            "digests": {
                "blake2b_256": "defa2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3",
                "md5": "9203bbb130f8ddb38269f4861c170d04",
                "sha256": "168bcccbf5106132e90b85659297700194369b8f6b3e5a03769614f0d200e370",
            },
            "downloads": -1,
            "filename": "ttttttttest_nester.py-0.1.0.tar.gz",
            "has_sig": False,
            "md5_digest": "9203bbb130f8ddb38269f4861c170d04",
            "packagetype": "sdist",
            "python_version": "source",
            "requires_python": None,
            "size": 546,
            "upload_time": "2016-10-13T05:42:27",
            "upload_time_iso_8601": "2016-10-13T05:42:27.073842Z",
            "url": "https://files.pythonhosted.org/packages/de/fa/"
            + "2fbcebaeeb909511139ce28dac4a77ab2452ba72b49a22b12981b2f375b3/ttttttttest_nester.py-0.1.0.tar.gz",
            "yanked": False,
            "yanked_reason": None,
        }
    ]
    releases = {  # this can just be the same content, as it'll be skipped anyway
        "0.1": release_content,
        "0.2": release_content,
    }
    pypi_package_json.get_releases.return_value = releases
    expected_result: tuple[HeuristicResult, dict] = (HeuristicResult.SKIP, {})

    actual_result = analyzer.analyze(pypi_package_json)
    assert actual_result == expected_result
