# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for high release frequency heuristic."""

from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.high_release_frequency import HighReleaseFrequencyAnalyzer


def test_low_release_frequency(pypi_package_json: MagicMock) -> None:
    """Test with low release frequency (should pass).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = HighReleaseFrequencyAnalyzer()

    # Mock return values.
    pypi_package_json.get_releases.return_value = {
        "0.1": [{"upload_time": "2022-01-01T12:00:00"}],
        "0.2": [{"upload_time": "2022-01-10T12:00:00"}],
        "0.3": [{"upload_time": "2022-01-20T12:00:00"}],
    }

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.PASS
    assert detail_info == {"frequency": 9}


def test_high_release_frequency(pypi_package_json: MagicMock) -> None:
    """Test with high release frequency (should fail).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = HighReleaseFrequencyAnalyzer()

    # Mock return values.
    pypi_package_json.get_releases.return_value = {
        "0.1": [{"upload_time": "2022-01-01T12:00:00"}],
        "0.2": [{"upload_time": "2022-01-02T12:00:00"}],
        "0.3": [{"upload_time": "2022-01-04T12:00:00"}],
    }

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.FAIL
    assert detail_info == {"frequency": 1}


def test_no_releases(pypi_package_json: MagicMock) -> None:
    """Test when no releases are available (should error).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = HighReleaseFrequencyAnalyzer()

    # Mock return values.
    pypi_package_json.get_releases.return_value = None

    # Call the method.
    with pytest.raises(HeuristicAnalyzerValueError):
        _ = analyzer.analyze(pypi_package_json)


def test_single_release(pypi_package_json: MagicMock) -> None:
    """Test with a single release (should skip).

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    """
    analyzer = HighReleaseFrequencyAnalyzer()

    # Mock return values.
    pypi_package_json.get_releases.return_value = {"0.1": [{"upload_time": "2022-01-01T12:00:00"}]}

    # Call the method.
    result, detail_info = analyzer.analyze(pypi_package_json)

    # Assert.
    assert result == HeuristicResult.SKIP
    assert not detail_info
