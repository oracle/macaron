# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for heuristic detecting malicious metadata from PyPI"""

from unittest.mock import MagicMock

import pytest

from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.source_code_repo import SourceCodeRepoAnalyzer


@pytest.mark.parametrize(
    ("repository", "expected_result"),
    [
        pytest.param(False, HeuristicResult.FAIL, id="test_no_repo"),
        pytest.param(True, HeuristicResult.PASS, id="test_valid_repo"),
    ],
)
def test_repo_existence(pypi_package_json: MagicMock, repository: bool, expected_result: HeuristicResult) -> None:
    """Test if the source code repo exists.

    Parameters
    ----------
    pypi_package_json: MagicMock
        The PyPIPackageJsonAsset MagicMock fixture.
    repository: bool
        Boolean stating whether this package has a related repository.
    expected_result: HeuristicResult
        The expected result of this run of the SourceCodeRepoAnalyzer.
    """
    pypi_package_json.has_repository = repository
    analyzer = SourceCodeRepoAnalyzer()
    result, _ = analyzer.analyze(pypi_package_json)
    assert result == expected_result
