# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the UnsecureDescriptionAnalyzer heuristic."""

from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.unsecure_description import UnsecureDescriptionAnalyzer


@pytest.fixture(name="analyzer")
def analyzer_() -> UnsecureDescriptionAnalyzer:
    """Pytest fixture to create an UnsecureDescriptionAnalyzer instance."""
    return UnsecureDescriptionAnalyzer()


def test_analyze_secure_description_pass(analyzer: UnsecureDescriptionAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when the package description is secure."""
    pypi_package_json.package_json = {"info": {"description": "This is an internal package."}}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info["message"] == "Package description is secure"


def test_analyze_unsecure_description_fail(analyzer: UnsecureDescriptionAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when the package description is unsecure."""
    pypi_package_json.package_json = {"info": {"description": "A public utility library."}}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["message"] == "Package description is unsecure"


def test_analyze_no_info_skip(analyzer: UnsecureDescriptionAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer raises an error when no package info is found."""
    pypi_package_json.package_json = {}
    with pytest.raises(HeuristicAnalyzerValueError) as exc_info:
        analyzer.analyze(pypi_package_json)
    assert "No package info found in metadata" in str(exc_info.value)


@pytest.mark.parametrize(
    ("metadata", "expected_result"),
    [
        ({"description": "For internal use only"}, HeuristicResult.PASS),
        ({"summary": "This is a private package"}, HeuristicResult.PASS),
        ({"description": "A placeholder for a future project"}, HeuristicResult.PASS),
        ({"summary": "Used for dependency confusion testing"}, HeuristicResult.PASS),
        ({"description": "A package for security research"}, HeuristicResult.PASS),
        ({"summary": "This name is reserved for namespace protection"}, HeuristicResult.PASS),
        ({"description": "This is a stub package"}, HeuristicResult.PASS),
        ({"description": "A regular package", "summary": "Does regular things"}, HeuristicResult.FAIL),
    ],
)
def test_analyze_scenarios(
    analyzer: UnsecureDescriptionAnalyzer,
    pypi_package_json: MagicMock,
    metadata: dict,
    expected_result: HeuristicResult,
) -> None:
    """Test the analyzer with various metadata scenarios."""
    pypi_package_json.package_json = {"info": metadata}
    result, _ = analyzer.analyze(pypi_package_json)
    assert result == expected_result
