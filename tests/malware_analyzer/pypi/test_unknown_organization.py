# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the UnknownOrganizationAnalyzer heuristic."""

import os
from pathlib import Path
from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.unknown_organization import UnknownOrganizationAnalyzer


@pytest.fixture(name="analyzer")
def analyzer_(tmp_path: Path) -> UnknownOrganizationAnalyzer:
    """Pytest fixture to create an UnknownOrganizationAnalyzer instance with a mocked trusted list."""
    trusted_orgs_file = Path(os.path.join(tmp_path, "trusted_organizations.txt"))
    trusted_orgs = ["oracle", "google", "microsoft"]
    trusted_orgs_file.write_text("\n".join(trusted_orgs), encoding="utf-8")
    analyzer_instance = UnknownOrganizationAnalyzer(str(trusted_orgs_file))
    return analyzer_instance


def test_analyze_trusted_org_pass(analyzer: UnknownOrganizationAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when the package is associated with a trusted organization."""
    pypi_package_json.package_json = {"info": {"author": "The Oracle Corporation"}}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info["message"] == "Package is associated with a trusted organization"


def test_analyze_unknown_org_fail(analyzer: UnknownOrganizationAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when the package is associated with an unknown organization."""
    pypi_package_json.package_json = {"info": {"author": "Unknown Developer"}}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["message"] == "Package is associated with an unknown organization"


def test_analyze_no_org_info_fail(analyzer: UnknownOrganizationAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when no organization information is found."""
    pypi_package_json.package_json = {"info": {}}
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["message"] == "Package is associated with an unknown organization"


def test_analyze_nonexistent_file_raises_error() -> None:
    """Test the analyzer raises an error if the trusted organizations file does not exist."""
    with pytest.raises(HeuristicAnalyzerValueError) as exc_info:
        UnknownOrganizationAnalyzer("nonexistent_file.txt")
    assert "Could not read trusted organizations file" in str(exc_info.value)


def test_empty_trusted_org_file_skip(tmp_path: Path, pypi_package_json: MagicMock) -> None:
    """Test the analyzer skips when the trusted organizations file is empty."""
    trusted_orgs_file = Path(os.path.join(tmp_path, "empty_trusted_orgs.txt"))
    trusted_orgs_file.write_text("", encoding="utf-8")
    analyzer_instance = UnknownOrganizationAnalyzer(str(trusted_orgs_file))
    result, info = analyzer_instance.analyze(pypi_package_json)
    assert result == HeuristicResult.SKIP
    warning_msg = info.get("warning")
    assert isinstance(warning_msg, str)
    assert "Trusted organizations file is empty" in warning_msg


def test_analyze_no_package_json_skip(analyzer: UnknownOrganizationAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer raises an error when no package JSON. is found."""
    pypi_package_json.package_json = {}
    with pytest.raises(HeuristicAnalyzerValueError) as exc_info:
        analyzer.analyze(pypi_package_json)
    assert "No package JSON found in metadata" in str(exc_info.value)


@pytest.mark.parametrize(
    ("metadata", "expected_result"),
    [
        ({"author": "The Oracle Corporation"}, HeuristicResult.PASS),
        ({"author_email": "developer@microsoft.com"}, HeuristicResult.PASS),
        ({"description": "A package by Google"}, HeuristicResult.PASS),
        ({"summary": "Official ORACLE library"}, HeuristicResult.PASS),
        ({"author": "Unknown Developer", "description": "Some random package"}, HeuristicResult.FAIL),
        ({}, HeuristicResult.FAIL),
    ],
)
def test_analyze_scenarios(
    analyzer: UnknownOrganizationAnalyzer,
    pypi_package_json: MagicMock,
    metadata: dict,
    expected_result: HeuristicResult,
) -> None:
    """Test the analyzer with various metadata scenarios."""
    pypi_package_json.package_json = {"info": metadata}
    result, _ = analyzer.analyze(pypi_package_json)
    assert result == expected_result
