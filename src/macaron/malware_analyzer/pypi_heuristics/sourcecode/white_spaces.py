# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This analyzer checks if the package has white spaces or invisible characters in the code."""

import logging
import re

from macaron.config.defaults import defaults
from macaron.json_tools import JsonType
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class WhiteSpacesAnalyzer(BaseHeuristicAnalyzer):
    """Check whether the code has successive white spaces or invisible characters."""

    INVISIBLE_CHARS = [
        "\u200b",
        "\u200c",
        "\u200d",
        "\ufeff",
        "\u200e",
        "\u200f",
        "\u00a0",
        "\u00ad",
        " ",
    ]

    def __init__(self) -> None:
        super().__init__(
            name="white_spaces_analyzer",
            heuristic=Heuristics.WHITE_SPACES,
            depends_on=None,
        )

        self.repeated_spaces_threshold = self._load_defaults()

    def _load_defaults(self) -> int:
        """Load default settings from defaults.ini.

        Returns
        -------
        int:
            The repeated spaces threshold.
        """
        section_name = "heuristic.pypi"
        default_threshold = 50

        if defaults.has_section(section_name):
            section = defaults[section_name]
            value_str = section.get("repeated_spaces_threshold", fallback=str(default_threshold))
            if value_str is not None and value_str.isdigit():
                return int(value_str)
            return default_threshold

        return default_threshold

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        scripts: dict[str, str] | None = pypi_package_json.get_sourcecode()
        if scripts is None:
            return HeuristicResult.SKIP, {}

        for file, content in scripts.items():
            if file.endswith(".py") and self.has_white_spaces(content):
                return HeuristicResult.FAIL, {
                    "file": file,
                }
        return HeuristicResult.PASS, {}

    def has_white_spaces(self, code_string: str) -> bool:
        """Check for excessive or invisible whitespace characters in a code string.

        Parameters
        ----------
        code_string: str
            The code string to check.

        Returns
        -------
        bool:
            True if suspicious patterns are found, False otherwise.
        """
        char_class = "".join(self.INVISIBLE_CHARS)
        regex_pattern = f"[{char_class}]{{{self.repeated_spaces_threshold},}}"
        if re.search(regex_pattern, code_string, re.DOTALL):
            return True
        return False
