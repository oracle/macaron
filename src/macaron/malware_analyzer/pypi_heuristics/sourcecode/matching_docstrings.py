# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This analyzer checks the iconsistency of code with its docstrings."""

import logging
import time
from typing import Literal

from pydantic import BaseModel, Field

from macaron.ai.ai_factory import AIClientFactory
from macaron.json_tools import JsonType
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class Result(BaseModel):
    """The result after analysing the code with its docstrings."""

    decision: Literal["consistent", "inconsistent"] = Field(
        description=""" The final decision after analysing the code with its docstrings.
        It can be either 'consistent' or 'inconsistent'."""
    )
    reason: str = Field(
        description=" The reason for the decision made. It should be a short sentence explaining the decision."
    )
    inconsistent_code_part: str | None = Field(
        default=None,
        description=""" The specific part of the code that is inconsistent with the docstring.
        Empty if the decision is 'consistent'.""",
    )


class MatchingDocstringsAnalyzer(BaseHeuristicAnalyzer):
    """Check whether the docstrings and the code components are consistent."""

    SYSTEM_PROMPT = """
        You are a code master who can detect the inconsistency of the code with the docstrings that describes its components.
        You will be given a python code file. Your task is to determine whether the code is consistent with the docstrings.
        Wrap the output in `json` tags.
        Your response must be a JSON object matching this schema:
        {
            "decision": "'consistent' or 'inconsistent'",
            "reason": "A short explanation.", "inconsistent_code_part":
            "The inconsistent code, or null."
        }

        /no_think
    """

    REQUEST_INTERVAL = 0.5

    def __init__(self) -> None:
        super().__init__(
            name="matching_docstrings_analyzer",
            heuristic=Heuristics.MATCHING_DOCSTRINGS,
            depends_on=None,
        )
        factory = AIClientFactory()
        client = None

        if factory.defaults["enabled"]:
            client = factory.create_client(self.SYSTEM_PROMPT.strip())

        self.client = client

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        if not self.client:
            return HeuristicResult.SKIP, {}

        download_result = pypi_package_json.download_sourcecode()
        if not download_result:
            logger.warning("No source code found for the package, skipping the matching docstrings analysis.")
            return HeuristicResult.SKIP, {}

        for file, content in pypi_package_json.iter_sourcecode():
            if file.endswith(".py"):
                time.sleep(self.REQUEST_INTERVAL)  # Respect the request interval to avoid rate limiting.
                code_str = content.decode("utf-8", "ignore")
                analysis_result = self.client.invoke(
                    user_prompt=code_str,
                    structured_output=Result,
                )
                if analysis_result and analysis_result.decision == "inconsistent":
                    return HeuristicResult.FAIL, {
                        "file": file,
                        "reason": analysis_result.reason,
                        "inconsistent part": analysis_result.inconsistent_code_part or "",
                    }
        return HeuristicResult.PASS, {}
