# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Define the heuristic enum."""

from enum import Enum


class Heuristics(Enum):
    """Seven heuristics for detecting suspicious pypi package.

    Attributes
    ----------
    EMPTY_PROJECT_LINK : str
        Indicates that the package does not contain any project links (such as documentation or Git repository pages).
    UNREACHABLE_PROJECT_LINKS : str
        Indicates that the package contains project links, but all of them are unreachable.
    ONE_RELEASE : str
        Indicates that the package contains only one release.
    HIGH_RELEASE_FREQUENCY : str
        The package has a high release frequency. The average release time (calculated as the sum of all release gaps
        divided by the number of gaps) is below a set threshold, which defaults to 2 days.
    UNCHANGED_RELEASE : str
        Indicates that all releases contain the same content (with identical digests).
    CLOSER_RELEASE_JOIN_DATE : str
        Refers to the gap between the date the maintainer registered their account and the date of the latest release.
    SUSPICIOUS_SETUP : str
        Indicates that the setup.py file contains suspicious imports, such as base64 and requests.
    """

    EMPTY_PROJECT_LINK = "empty_project_link"
    UNREACHABLE_PROJECT_LINKS = "unreachable_project_links"
    ONE_RELEASE = "one_release"
    HIGH_RELEASE_FREQUENCY = "high_release_frequency"
    UNCHANGED_RELEASE = "unchanged_release"
    CLOSER_RELEASE_JOIN_DATE = "closer_release_join_date"
    SUSPICIOUS_SETUP = "suspicious_setup"


class HeuristicResult(Enum):
    """Result type indicating the outcome of a heuristic.

    Attributes
    ----------
        PASS: Indicates that no suspicious activity was detected.
        FAIL: Indicates that suspicious activity was detected.
        SKIP: Indicates that the heuristic check could not be performed due to missing metadata.

    The `SKIP` result occurs when the necessary metadata is not available. This often happens
    when fetching data through the PyPI API and the relevant data, such as the maintainer's
    join date or release information, is missing or unavailable.
    """

    PASS = "PASS"  # nosec B105
    FAIL = "FAIL"
    SKIP = "SKIP"
