# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This analyzer checks if a PyPI package is associated with a not trusted organization."""

import logging
import os
import re

from macaron import MACARON_PATH
from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class UnknownOrganizationAnalyzer(BaseHeuristicAnalyzer):
    """Check whether the package is associated with a not trusted organization."""

    def __init__(self, trusted_organizations_path: str | None = None) -> None:
        super().__init__(
            name="unknown_organization_analyzer", heuristic=Heuristics.UNKNOWN_ORGANIZATION, depends_on=None
        )
        self.path = trusted_organizations_path or os.path.join(MACARON_PATH, "resources/trusted_organizations.txt")
        self.trusted_organizations = self._load_defaults()

    def _load_defaults(self) -> list[str]:
        """Load default settings from defaults.ini.

        Returns
        -------
        list[str]:
            The trusted organizations list.
        """
        trusted_organizations = []
        try:
            with open(self.path, encoding="utf-8") as file:
                trusted_organizations = file.read().splitlines()
        except OSError as error:
            error_message = "Could not read trusted organizations file"
            logger.debug(error_message)
            raise HeuristicAnalyzerValueError(error_message) from error
        return [organisation.lower() for organisation in trusted_organizations]

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        if not self.trusted_organizations:
            warning_message = "Trusted organizations file is empty"
            logger.warning(warning_message)
            return HeuristicResult.SKIP, {"warning": warning_message}

        package_json = pypi_package_json.package_json
        if not package_json:
            error_message = "No package JSON found in metadata"
            logger.debug(error_message)
            raise HeuristicAnalyzerValueError(error_message)

        author = json_extract(package_json, ["info", "author"], str)
        maintainer = json_extract(package_json, ["info", "maintainer"], str)
        author_email = json_extract(package_json, ["info", "author_email"], str)
        description = json_extract(package_json, ["info", "description"], str)
        summary = json_extract(package_json, ["info", "summary"], str)
        data = f"{author} {maintainer} {author_email} {description} {summary}"

        for org in self.trusted_organizations:
            if re.search(rf"\b{re.escape(org)}\b", data, re.IGNORECASE):
                return HeuristicResult.PASS, {"message": "Package is associated with a trusted organization"}

        return HeuristicResult.FAIL, {"message": "Package is associated with an unknown organization"}
