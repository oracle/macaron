# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""The heuristic analyzer to check if a source code repo was found."""

import logging

from macaron.json_tools import JsonType
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class SourceCodeRepoAnalyzer(BaseHeuristicAnalyzer):
    """
    Analyze the accessibility of the source code repository.

    Passes if a repository was found and validated by the repo finder, otherwise fails.
    """

    def __init__(self) -> None:
        super().__init__(
            name="source_code_repo_analyzer",
            heuristic=Heuristics.SOURCE_CODE_REPO,
            depends_on=[(Heuristics.EMPTY_PROJECT_LINK, HeuristicResult.PASS)],
        )

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        # If a sourcecode repo exists, then this will have already been validated
        if not pypi_package_json.component.repository:
            return HeuristicResult.FAIL, {}
        return HeuristicResult.PASS, {}
