# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This analyzer checks if a PyPI package has minimal content."""

import logging
import os

from macaron.errors import SourceCodeError
from macaron.json_tools import JsonType
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class MinimalContentAnalyzer(BaseHeuristicAnalyzer):
    """Check whether the package has minimal content."""

    FILES_THRESHOLD = 3

    def __init__(self) -> None:
        super().__init__(
            name="minimal_content_analyzer",
            heuristic=Heuristics.MINIMAL_CONTENT,
            depends_on=None,
        )

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        result = pypi_package_json.download_sourcecode()
        if not result:
            error_msg = "No source code files have been downloaded"
            logger.debug(error_msg)
            raise SourceCodeError(error_msg)

        file_count = sum(len(files) for _, _, files in os.walk(pypi_package_json.package_sourcecode_path))

        if file_count >= self.FILES_THRESHOLD:
            return HeuristicResult.PASS, {"message": "Package has sufficient content"}

        return HeuristicResult.FAIL, {"message": "Not enough files found"}
