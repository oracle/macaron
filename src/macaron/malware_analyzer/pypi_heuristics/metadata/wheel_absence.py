# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""The heuristic analyzer to check .whl file absence."""

import logging

from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset
from macaron.util import send_head_http_raw

logger: logging.Logger = logging.getLogger(__name__)


class WheelAbsenceAnalyzer(BaseHeuristicAnalyzer):
    """
    Analyze to see if a .whl file is available for the package.

    If a package is distributed with a .whl file, this heuristic passes. Otherwise, the
    heuristic fails.
    """

    WHEEL: str = "bdist_wheel"
    INSPECTOR_PREFIX = "https://inspector.pypi.io/project/"
    PYPI_PREFIX = "https://files.pythonhosted.org/"

    def __init__(self) -> None:
        super().__init__(
            name="wheel_absence_analyzer",
            heuristic=Heuristics.WHEEL_ABSENCE,
            depends_on=None,
        )

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.

        Raises
        ------
        HeuristicAnalyzerValueError
            If there is no release information, or has no most recent version (if queried).
        """
        releases = pypi_package_json.get_releases()
        if releases is None:  # no release information
            error_msg = "There is no information for any release of this package."
            logger.debug(error_msg)
            raise HeuristicAnalyzerValueError(error_msg)

        version = pypi_package_json.component.version
        if version is None:  # check latest release version
            version = pypi_package_json.get_latest_version()

            if version is None:
                error_msg = "There is no latest version of this package."
                logger.debug(error_msg)
                raise HeuristicAnalyzerValueError(error_msg)

        file_server_links: list[JsonType] = []
        inspector_links: list[JsonType] = []
        wheel_present: bool = False

        try:
            for release_metadata in releases[version]:
                if release_metadata["packagetype"] == self.WHEEL:
                    wheel_present = True

                name = json_extract(pypi_package_json.package_json, ["info", "name"], str)
                if name is None:
                    error_msg = "There is no 'name' field for this package."
                    logger.debug(error_msg)
                    raise HeuristicAnalyzerValueError(error_msg)

                # include the pypi inspector link, which uses the same suffix of
                # packages/{blake2b_256}/file_name
                inspector_prefix = f"{self.INSPECTOR_PREFIX}{name.lower()}/{version}/"
                inspector_link = release_metadata["url"].replace(self.PYPI_PREFIX, inspector_prefix)

                # use a head request because we don't care about the response contents
                if send_head_http_raw(inspector_link) is None:
                    inspector_link = None

                file_server_links.append(release_metadata["url"])
                inspector_links.append(inspector_link)

        except KeyError as error:
            error_msg = f"The version {version} is not available as a release."
            logger.debug(error_msg)
            raise HeuristicAnalyzerValueError(error_msg) from error

        detail_info: dict[str, JsonType] = {
            "version": version,
            "file_server_links": file_server_links,
            "inspector_links": inspector_links,
        }

        if wheel_present:
            return HeuristicResult.PASS, detail_info

        return HeuristicResult.FAIL, detail_info
