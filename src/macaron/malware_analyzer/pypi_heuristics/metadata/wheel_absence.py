# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""The heuristic analyzer to check .whl file absence."""

import logging

from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset
from macaron.util import send_head_http_raw

logger: logging.Logger = logging.getLogger(__name__)


class WheelAbsenceAnalyzer(BaseHeuristicAnalyzer):
    """
    Analyze to see if a .whl file is available for the package.

    If a package is distributed with a .whl file, this heuristic passes. Otherwise, the
    heuristic fails.
    """

    WHEEL: str = "bdist_wheel"
    # as per https://github.com/pypi/inspector/blob/main/inspector/main.py line 125
    INSPECTOR_TEMPLATE = (
        "{inspector_url_scheme}://{inspector_url_netloc}/project/"
        "{name}/{version}/packages/{first}/{second}/{rest}/{filename}"
    )

    def __init__(self) -> None:
        super().__init__(
            name="wheel_absence_analyzer",
            heuristic=Heuristics.WHEEL_ABSENCE,
            depends_on=None,
        )

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.

        Raises
        ------
        HeuristicAnalyzerValueError
            If there is no release information, or has other missing package information.
        """
        releases = pypi_package_json.get_releases()
        if releases is None:  # no release information
            error_msg = "There is no information for any release of this package."
            logger.debug(error_msg)
            raise HeuristicAnalyzerValueError(error_msg)

        version = pypi_package_json.component_version
        if version is None:  # check latest release version
            version = pypi_package_json.get_latest_version()

            if version is None:
                error_msg = "There is no latest version of this package."
                logger.debug(error_msg)
                raise HeuristicAnalyzerValueError(error_msg)

        # Contains a boolean field identifying if the link is reachable by this Macaron instance or not.
        inspector_links: dict[str, JsonType] = {}
        wheel_present: bool = False

        release_distributions = json_extract(releases, [version], list)
        if release_distributions is None:
            error_msg = f"The version {version} is not available as a release."
            logger.debug(error_msg)
            raise HeuristicAnalyzerValueError(error_msg)

        for distribution in release_distributions:
            # validate data
            package_type = json_extract(distribution, ["packagetype"], str)
            if package_type is None:
                error_msg = f"The version {version} has no 'package type' field in a distribution"
                logger.debug(error_msg)
                raise HeuristicAnalyzerValueError(error_msg)

            name = json_extract(pypi_package_json.package_json, ["info", "name"], str)
            if name is None:
                error_msg = f"The version {version} has no 'name' field in a distribution"
                logger.debug(error_msg)
                raise HeuristicAnalyzerValueError(error_msg)

            blake2b_256 = json_extract(distribution, ["digests", "blake2b_256"], str)
            if blake2b_256 is None:
                error_msg = f"The version {version} has no 'blake2b_256' field in a distribution"
                logger.debug(error_msg)
                raise HeuristicAnalyzerValueError(error_msg)

            filename = json_extract(distribution, ["filename"], str)
            if filename is None:
                error_msg = f"The version {version} has no 'filename' field in a distribution"
                logger.debug(error_msg)
                raise HeuristicAnalyzerValueError(error_msg)

            if package_type == self.WHEEL:
                wheel_present = True

            inspector_link = self.INSPECTOR_TEMPLATE.format(
                inspector_url_scheme=pypi_package_json.pypi_registry.inspector_url_scheme,
                inspector_url_netloc=pypi_package_json.pypi_registry.inspector_url_netloc,
                name=name,
                version=version,
                first=blake2b_256[0:2],
                second=blake2b_256[2:4],
                rest=blake2b_256[4:],
                filename=filename,
            )

            # use a head request because we don't care about the response contents
            inspector_links[inspector_link] = False
            if send_head_http_raw(inspector_link):
                inspector_links[inspector_link] = True  # link was reachable

        detail_info: dict[str, JsonType] = {
            "inspector_links": inspector_links,
        }

        if wheel_present:
            return HeuristicResult.PASS, detail_info

        return HeuristicResult.FAIL, detail_info
