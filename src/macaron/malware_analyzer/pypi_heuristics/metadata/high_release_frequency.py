# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Analyzer checks the frequent release heuristic."""

import logging
from datetime import datetime

from macaron.json_tools import json_extract
from macaron.malware_analyzer.datetime_parser import parse_datetime
from macaron.malware_analyzer.pypi_heuristics.analysis_result import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIRegistry

logger: logging.Logger = logging.getLogger(__name__)


class HighReleaseFrequencyAnalyzer(BaseHeuristicAnalyzer):
    """Analyzer checks heuristic."""

    def __init__(self) -> None:
        super().__init__(
            name="high_release_frequency_analyzer",
            heuristic=Heuristics.HIGH_RELEASE_FREQUENCY,
            depends_on=[(Heuristics.ONE_RELEASE, HeuristicResult.PASS)],  # Analyzing when this heuristic pass
        )
        self.average_gap_threshold: int = 2  # Days

    def analyze(self, api_client: PyPIRegistry) -> tuple[HeuristicResult, dict]:
        """Check whether the release frequency is high.

        Returns
        -------
            tuple[HeuristicResult, Confidence | None]: Confidence and result.
        """
        version_to_releases: dict | None = api_client.get_releases()
        if version_to_releases is None:
            return HeuristicResult.SKIP, {}
        releases_amount = len(version_to_releases)

        extract_data: dict[str, datetime] = {}
        for version, metadata in version_to_releases.items():
            if not metadata:
                continue
            upload_time: str | None = json_extract(metadata[0], ["upload_time"], str)
            if upload_time is None:
                continue
            datetime_format: str = "%Y-%m-%dT%H:%M:%S"
            res: datetime | None = parse_datetime(upload_time, datetime_format)
            if res:
                extract_data[version] = res

        prev_timestamp: datetime = next(iter(extract_data.values()))

        days_sum = 0
        releases = list(extract_data.values())[1:]
        for timestamp in releases:
            diff_timestamp = abs(timestamp - prev_timestamp)
            days_sum += diff_timestamp.days
        frequency = days_sum // (releases_amount - 1)

        if frequency <= self.average_gap_threshold:
            return HeuristicResult.FAIL, {"frequency": frequency}
        return HeuristicResult.PASS, {"frequency": frequency}
