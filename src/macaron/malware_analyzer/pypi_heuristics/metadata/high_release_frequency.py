# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Analyzer checks the frequent release heuristic."""

import logging
from datetime import datetime

from macaron.config.defaults import defaults
from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.datetime_parser import parse_datetime
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class HighReleaseFrequencyAnalyzer(BaseHeuristicAnalyzer):
    """Check whether the release frequency is high."""

    def __init__(self) -> None:
        super().__init__(
            name="high_release_frequency_analyzer",
            heuristic=Heuristics.HIGH_RELEASE_FREQUENCY,
            depends_on=[(Heuristics.ONE_RELEASE, HeuristicResult.PASS)],  # Analyzing when this heuristic pass
        )
        self.average_gap_threshold: int = self._load_defaults()  # Days

    def _load_defaults(self) -> int:
        """Load the default values from defaults.ini."""
        section_name = "heuristic.pypi"
        if defaults.has_section(section_name):
            section = defaults[section_name]
            return section.getint("releases_frequency_threshold")
        return 2

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        version_to_releases: dict | None = pypi_package_json.get_releases()
        if version_to_releases is None or len(version_to_releases) == 1:
            return HeuristicResult.SKIP, {}

        extract_data: dict[str, datetime] = {}
        for version, metadata in version_to_releases.items():
            if not metadata:
                continue
            upload_time: str | None = json_extract(metadata[0], ["upload_time"], str)
            if upload_time is None:
                continue
            datetime_format: str = "%Y-%m-%dT%H:%M:%S"
            res: datetime | None = parse_datetime(upload_time, datetime_format)
            if res:
                extract_data[version] = res

        prev_timestamp: datetime = next(iter(extract_data.values()))

        days_sum = 0
        releases = list(extract_data.values())[1:]
        for timestamp in releases:
            diff_timestamp = abs(timestamp - prev_timestamp)
            days_sum += diff_timestamp.days
            prev_timestamp = timestamp
        frequency = days_sum // (len(version_to_releases) - 1)

        if frequency <= self.average_gap_threshold:
            return HeuristicResult.FAIL, {"frequency": frequency}

        return HeuristicResult.PASS, {"frequency": frequency}
