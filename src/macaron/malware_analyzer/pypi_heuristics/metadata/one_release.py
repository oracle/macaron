# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.


"""Analyzer checks the packages contain one release."""

import logging

from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class OneReleaseAnalyzer(BaseHeuristicAnalyzer):
    """Determine if there is only one release of the package."""

    def __init__(self) -> None:
        super().__init__(name="one_release_analyzer", heuristic=Heuristics.ONE_RELEASE)

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        releases: dict | None = pypi_package_json.get_releases()
        if releases is None:
            error_msg = "Metadata has no release information"
            logger.debug(error_msg)
            raise HeuristicAnalyzerValueError(error_msg)

        if len(releases) == 1:
            return HeuristicResult.FAIL, {"releases": releases}  # Higher false positive, so we keep it MEDIUM

        return HeuristicResult.PASS, {"releases": releases}
