# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""The heuristic analyzer to check the project links."""

import logging

import requests

from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIRegistry

logger: logging.Logger = logging.getLogger(__name__)


class UnreachableProjectLinksAnalyzer(BaseHeuristicAnalyzer):
    """
    Analyze the accessibility of the project links.

    If >= 1 project links are reachable, the analyzer consider the package as benign.
    """

    def __init__(self) -> None:
        super().__init__(
            name="unreachable_project_links_analyzer",
            heuristic=Heuristics.UNREACHABLE_PROJECT_LINKS,
            depends_on=[(Heuristics.EMPTY_PROJECT_LINK, HeuristicResult.PASS)],
        )

    def analyze(self, api_client: PyPIRegistry) -> tuple[HeuristicResult, dict]:
        """Analyze the package.

        Parameters
        ----------
        api_client: PyPIRegistry
            The API client.

        Returns
        -------
        tuple[HeuristicResult, dict]
            The result type and relevant metadata.
        """
        project_links: dict | None = api_client.get_project_links()

        if project_links is None:
            return HeuristicResult.SKIP, {}

        for link in project_links.values():
            try:
                response = requests.head(link, timeout=3)
                if response.status_code < 400:
                    return HeuristicResult.PASS, {}
            except requests.exceptions.RequestException as error:
                logger.debug(error)
                continue

        return HeuristicResult.FAIL, {}
