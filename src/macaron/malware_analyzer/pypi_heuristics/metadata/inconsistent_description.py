# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This analyzer checks if a PyPI package has unsecure description."""

import logging

from macaron.ai.clients.ai_factory import AIClientFactory
from macaron.config.defaults import defaults
from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class InconsistentDescriptionAnalyzer(BaseHeuristicAnalyzer):
    """Check whether the package's description is unsecure."""

    SYSTEM_PROMPT = """
    You are a security expert analyzing a PyPI package. Determine if the package description is secure.
    you must score between 0 and 100 based on the following criteria:
    - High-level description summary
    - Benefit
    - How to install
    - How to use
    - Are the "How to use", "High-level description summary", and "Benefit" sections consistent?

    Wrap the output in `json` tags.
    Your response must be a JSON object matching this schema:
    {
        "score": 0-100,
        "reason": "A short explanation.",
    }
    """

    RESPONSE_FORMAT = {
        "type": "json_schema",
        "json_schema": {
            "name": "result_schema",
            "strict": True,
            "schema": {
                "type": "object",
                "properties": {
                    "score": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "The final score from 0 to 100 after analysing the packages' description.",
                    },
                    "reason": {
                        "type": "string",
                        "description": "The reason for the overall score. It should be a short sentence explaining the decision.",
                    },
                },
                "required": ["score", "reason"],
            },
        },
    }

    def __init__(self) -> None:
        super().__init__(
            name="inconsistent_description_analyzer", heuristic=Heuristics.INCONSISTENT_DESCRIPTION, depends_on=None
        )
        self.threshold = self._load_defaults()
        factory = AIClientFactory()
        self.client = factory.create_client(self.SYSTEM_PROMPT.strip())

    def _load_defaults(self) -> int:
        """Load the default values from defaults.ini."""
        section_name = "heuristic.pypi"
        if defaults.has_section(section_name):
            section = defaults[section_name]
            return section.getint("score_threshold", 70)
        return 70

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        if not self.client:
            return HeuristicResult.SKIP, {}

        package_json = pypi_package_json.package_json
        info = package_json.get("info", {})
        if not info:
            error_msg = "No package info found in metadata"
            logger.debug(error_msg)
            raise HeuristicAnalyzerValueError(error_msg)

        description = json_extract(package_json, ["info", "description"], str)
        if not description or not description.strip():
            return HeuristicResult.FAIL, {"message": "No description found."}

        analysis_result = self.client.invoke(
            user_prompt=description,
            response_format=self.RESPONSE_FORMAT,
        )
        if not analysis_result:
            logger.error("LLM returned invalid response, skipping the analysis.")
            return HeuristicResult.SKIP, {}

        if analysis_result["score"] < self.threshold:
            return HeuristicResult.FAIL, {
                "message": f"inconsistent description with score {analysis_result['score']}. because {analysis_result['reason']}"
            }
        return HeuristicResult.PASS, {"message": f"consistent description with a {analysis_result['score']} score."}
