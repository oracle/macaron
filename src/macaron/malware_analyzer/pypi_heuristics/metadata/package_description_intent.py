# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This analyzer checks if a PyPI package is a stub or placeholder package, using its description and summary."""

import logging
import re

from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class PackageDescriptionIntentAnalyzer(BaseHeuristicAnalyzer):
    """Package description contains keywords indicating it is a stub package or dependency confusion prevention placeholder."""

    SECURE_DESCRIPTION_REGEX = re.compile(
        r"\b(?:stub|placeholder|dependency confusion|security|namespace protection|reserved|prevent)\b",
        re.IGNORECASE,
    )

    def __init__(self) -> None:
        super().__init__(
            name="package_description_intent", heuristic=Heuristics.PACKAGE_DESCRIPTION_INTENT, depends_on=None
        )

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        package_json = pypi_package_json.package_json
        info = package_json.get("info", {})
        if not info:
            error_msg = "No package info found in metadata"
            logger.debug(error_msg)
            raise HeuristicAnalyzerValueError(error_msg)

        description = json_extract(package_json, ["info", "description"], str)
        summary = json_extract(package_json, ["info", "summary"], str)
        data = f"{description} {summary}"
        if self.SECURE_DESCRIPTION_REGEX.search(data):
            return HeuristicResult.PASS, {"message": "Package description indicates a stub or placeholder package."}
        return HeuristicResult.FAIL, {"message": "Package description does not indicate a stub or placeholder package."}
