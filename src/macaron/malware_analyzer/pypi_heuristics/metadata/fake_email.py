# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""The heuristic analyzer to check the email address of the package maintainers."""

import logging
import re

from email_validator import EmailNotValidError, ValidatedEmail, validate_email

from macaron.config.defaults import defaults
from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class FakeEmailAnalyzer(BaseHeuristicAnalyzer):
    """Analyze the email address of the package maintainers."""

    PATTERN = re.compile(
        r"""\b            # word‑boundary
        [A-Za-z0-9]+      # first alpha‑numeric segment
        (?:\.[A-Za-z0-9]+)*   # optional “.segment” repeats
        @
        [A-Za-z0-9]+      # domain name segment
        (?:\.[A-Za-z0-9]+)*   # optional sub‑domains
        \.[A-Za-z]{2,}    # top‑level domain (at least 2 letters)
        \b""",
        re.VERBOSE,
    )

    def __init__(self) -> None:
        super().__init__(
            name="fake_email_analyzer",
            heuristic=Heuristics.FAKE_EMAIL,
            depends_on=None,
        )
        self.check_deliverability: bool = self._load_defaults()

    def _load_defaults(self) -> bool:
        """Load the default values from defaults.ini."""
        section_name = "heuristic.pypi"
        if defaults.has_section(section_name):
            section = defaults[section_name]
            return section.getboolean("check_deliverability", fallback=True)
        return True

    def get_emails(self, email_field: str) -> list[str]:
        """Extract emails from the given email field.

        Parameters
        ----------
        email_field: str
            The email field from which to extract emails.

        Returns
        -------
        list[str]
            A list of emails extracted from the email field.
        """
        emails = self.PATTERN.findall(email_field)
        return [email.strip() for email in emails if email.strip()]

    def is_valid_email(self, email: str) -> ValidatedEmail | None:
        """Check if the email format is valid and the domain has MX records.

        Parameters
        ----------
        email: str
            The email address to check.

        Returns
        -------
        ValidatedEmail | None
            The validated email object if the email is valid, otherwise None.
        """
        emailinfo = None
        try:
            emailinfo = validate_email(email, check_deliverability=self.check_deliverability)
        except EmailNotValidError as err:
            err_message = f"Invalid email address: {email}. Error: {err}"
            logger.warning(err_message)
        return emailinfo

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        package_json = pypi_package_json.package_json
        if not package_json.get("info", {}):
            raise HeuristicAnalyzerValueError("No package info available.")

        author_email = json_extract(package_json, ["info", "author_email"], str)
        maintainer_email = json_extract(package_json, ["info", "maintainer_email"], str)

        if not author_email and not maintainer_email:
            return HeuristicResult.SKIP, {"message": "No author or maintainer email available."}

        validated_emails: list[JsonType] = []
        details = ["normalized", "local_part", "domain"]

        for email_field in [author_email, maintainer_email]:
            if email_field:
                emails = self.get_emails(email_field)
                if not emails:
                    return HeuristicResult.FAIL, {"message": "no emails found in the email field"}

                for email in emails:
                    email_info = self.is_valid_email(email)
                    if not email_info:
                        return HeuristicResult.FAIL, {"invalid_email": email}

                    validated_emails.append({key: getattr(email_info, key) for key in details})

        return HeuristicResult.PASS, {"validated_emails": validated_emails}
