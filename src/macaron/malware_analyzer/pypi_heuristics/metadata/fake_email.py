# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""The heuristic analyzer to check the email address of the package maintainers."""

import logging
import re

import dns.resolver as dns_resolver

from macaron.errors import HeuristicAnalyzerValueError
from macaron.json_tools import JsonType
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class FakeEmailAnalyzer(BaseHeuristicAnalyzer):
    """Analyze the email address of the package maintainers."""

    def __init__(self) -> None:
        super().__init__(
            name="fake_email_analyzer",
            heuristic=Heuristics.FAKE_EMAIL,
            depends_on=None,
        )

    def is_valid_email(self, email: str) -> bool:
        """Check if the email format is valid and the domain has MX records.

        Parameters
        ----------
        email: str
            The email address to check.

        Returns
        -------
        bool:
            ``True`` if the email address is valid, ``False`` otherwise.

        Raises
        ------
        HeuristicAnalyzerValueError
            if the failure is due to DNS resolution.
        """
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            return False

        domain = email.split("@")[1]
        try:
            records = dns_resolver.resolve(domain, "MX")
            if not records:
                return False
        except Exception as err:
            err_message = f"Failed to resolve domain {domain}: {err}"
            raise HeuristicAnalyzerValueError(err_message) from err
        return True

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.

        Raises
        ------
        HeuristicAnalyzerValueError
            if the analysis fails.
        """
        response = pypi_package_json.download("")
        if not response:
            error_message = "Failed to download package JSON "
            return HeuristicResult.FAIL, {"message": error_message}

        data = pypi_package_json.package_json
        author_email = data.get("info", {}).get("author_email", None)
        maintainer_email = data.get("info", {}).get("maintainer_email", None)
        if maintainer_email is None and author_email is None:
            message = "No maintainers are available"
            return HeuristicResult.SKIP, {"message": message}

        if author_email is not None and not self.is_valid_email(author_email):
            return HeuristicResult.FAIL, {"email": author_email}
        if maintainer_email is not None and not self.is_valid_email(maintainer_email):
            return HeuristicResult.FAIL, {"email": maintainer_email}

        return HeuristicResult.PASS, {}
