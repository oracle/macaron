# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""The heuristic analyzer to check the email address of the package maintainers."""

import logging

from email_validator import EmailNotValidError, ValidatedEmail, validate_email

from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class FakeEmailAnalyzer(BaseHeuristicAnalyzer):
    """Analyze the email address of the package maintainers."""

    def __init__(self) -> None:
        super().__init__(
            name="fake_email_analyzer",
            heuristic=Heuristics.FAKE_EMAIL,
            depends_on=None,
        )

    def is_valid_email(self, email: str) -> ValidatedEmail | None:
        """Check if the email format is valid and the domain has MX records.

        Parameters
        ----------
        email: str
            The email address to check.

        Returns
        -------
        ValidatedEmail | None
            The validated email object if the email is valid, otherwise None.

        Raises
        ------
        HeuristicAnalyzerValueError
            if the failure is due to DNS resolution.
        """
        emailinfo = None
        try:
            emailinfo = validate_email(email, check_deliverability=True)
        except EmailNotValidError as err:
            err_message = f"Invalid email address: {email}. Error: {err}"
            logger.warning(err_message)
        return emailinfo

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Analyze the package.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.

        Raises
        ------
        HeuristicAnalyzerValueError
            if the analysis fails.
        """
        package_json = pypi_package_json.package_json
        if not package_json.get("info", {}):
            return HeuristicResult.SKIP, {"message": "No package info available."}

        author_email = json_extract(package_json, ["info", "author_email"], str)
        maintainer_email = json_extract(package_json, ["info", "maintainer_email"], str)

        if not author_email and not maintainer_email:
            return HeuristicResult.SKIP, {"message": "No author or maintainer email available."}

        validated_emails: list[JsonType] = []
        details = ["normalized", "local_part", "domain"]

        for email in [author_email, maintainer_email]:
            if email:
                email_info = self.is_valid_email(email)
                if not email_info:
                    return HeuristicResult.FAIL, {"email": email}

                validated_emails.append({key: getattr(email_info, key) for key in details})

        return HeuristicResult.PASS, {"validated_emails": validated_emails}
