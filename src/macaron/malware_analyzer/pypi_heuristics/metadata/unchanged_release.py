# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Heuristics analyzer to check unchanged content in multiple releases."""
import logging
from collections import Counter

from macaron.json_tools import JsonType, json_extract
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIPackageJsonAsset

logger: logging.Logger = logging.getLogger(__name__)


class UnchangedReleaseAnalyzer(BaseHeuristicAnalyzer):
    """Analyze whether the content of the package is updated by the maintainer."""

    def __init__(self) -> None:
        super().__init__(
            name="unchanged_release_analyzer",
            heuristic=Heuristics.UNCHANGED_RELEASE,
            depends_on=[(Heuristics.HIGH_RELEASE_FREQUENCY, HeuristicResult.FAIL)],
        )
        self.hash_algo: str = "sha256"

    def _get_digests(self, pypi_package_json: PyPIPackageJsonAsset) -> list[str] | None:
        """Get all digests of the releases.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        list[str] | None
            The digests.
        """
        releases: dict | None = pypi_package_json.get_releases()
        if releases is None:
            return None

        digests: list[str] = []
        for metadata in releases.values():
            if not metadata:
                continue

            digest: str | None = json_extract(metadata[0], ["digests", self.hash_algo], str)
            if digest is None:
                continue
            digests.append(digest)

        return digests

    def analyze(self, pypi_package_json: PyPIPackageJsonAsset) -> tuple[HeuristicResult, dict[str, JsonType]]:
        """Check the content of releases keep updating.

        Parameters
        ----------
        pypi_package_json: PyPIPackageJsonAsset
            The PyPI package JSON asset object.

        Returns
        -------
        tuple[HeuristicResult, dict[str, JsonType]]:
            The result and related information collected during the analysis.
        """
        digests: list[str] | None = self._get_digests(pypi_package_json)
        if digests is None:
            return HeuristicResult.SKIP, {}

        frequency = Counter(digests)
        highest_frequency = max(frequency.values())
        if highest_frequency > 1:  # Any two release are same
            return HeuristicResult.FAIL, {}

        return HeuristicResult.PASS, {}
