# Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This check examines the metadata of pypi packages with seven heuristics."""

import logging

from packageurl import PackageURL
from sqlalchemy import ForeignKey, String
from sqlalchemy.orm import Mapped, mapped_column

from macaron.database.table_definitions import CheckFacts
from macaron.malware_analyzer.pypi_heuristics.base_analyzer import BaseHeuristicAnalyzer
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult, Heuristics
from macaron.malware_analyzer.pypi_heuristics.metadata.closer_release_join_date import CloserReleaseJoinDateAnalyzer
from macaron.malware_analyzer.pypi_heuristics.metadata.empty_project_link import EmptyProjectLinkAnalyzer
from macaron.malware_analyzer.pypi_heuristics.metadata.high_release_frequency import HighReleaseFrequencyAnalyzer
from macaron.malware_analyzer.pypi_heuristics.metadata.one_release import OneReleaseAnalyzer
from macaron.malware_analyzer.pypi_heuristics.metadata.unchanged_release import UnchangedReleaseAnalyzer
from macaron.malware_analyzer.pypi_heuristics.metadata.unreachable_project_links import UnreachableProjectLinksAnalyzer
from macaron.malware_analyzer.pypi_heuristics.sourcecode.suspicious_setup import SuspiciousSetupAnalyzer
from macaron.slsa_analyzer.analyze_context import AnalyzeContext
from macaron.slsa_analyzer.checks.base_check import BaseCheck
from macaron.slsa_analyzer.checks.check_result import CheckResultData, CheckResultType, Confidence, JustificationType
from macaron.slsa_analyzer.package_registry.pypi_registry import PyPIRegistry
from macaron.slsa_analyzer.registry import registry

logger: logging.Logger = logging.getLogger(__name__)


class HeuristicAnalysisResultFacts(CheckFacts):
    """The ORM mapping for justifications in pypi heuristic check."""

    __tablename__ = "_detect_malicious_metadata_check"

    #: The primary key.
    id: Mapped[int] = mapped_column(ForeignKey("_check_facts.id"), primary_key=True)  # noqa: A003

    #: List of heuristic names that failed.
    heuristics_fail: Mapped[str] = mapped_column(String, nullable=False, info={"justification": JustificationType.TEXT})

    #: Detailed information about the analysis.
    detail_information: Mapped[str] = mapped_column(
        String, nullable=False, info={"justification": JustificationType.TEXT}
    )

    #: The result of heuristic analysis.
    heuristic_result: Mapped[str] = mapped_column(
        String, nullable=False, info={"justification": JustificationType.TEXT}
    )

    __mapper_args__ = {
        "polymorphic_identity": "_detect_malicious_metadata_check",
    }


# This list contains the heuristic analyzer classes
# When implementing new analyzer, appending the classes to this list
ANALYZERS: list = [
    EmptyProjectLinkAnalyzer,
    UnreachableProjectLinksAnalyzer,
    OneReleaseAnalyzer,
    HighReleaseFrequencyAnalyzer,
    UnchangedReleaseAnalyzer,
    CloserReleaseJoinDateAnalyzer,
    SuspiciousSetupAnalyzer,
]

# The HeuristicResult sequence is aligned with the sequence of ANALYZERS list
SUSPICIOUS_COMBO: dict[
    tuple[
        HeuristicResult,
        HeuristicResult,
        HeuristicResult,
        HeuristicResult,
        HeuristicResult,
        HeuristicResult,
        HeuristicResult,
    ],
    float,
] = {
    (
        HeuristicResult.FAIL,  # Empty Project
        HeuristicResult.SKIP,  # Unreachable Project Links
        HeuristicResult.FAIL,  # One Release
        HeuristicResult.SKIP,  # High Release Frequency
        HeuristicResult.SKIP,  # Unchanged Release
        HeuristicResult.FAIL,  # Closer Release Join Date
        HeuristicResult.FAIL,  # Suspicious Setup
        # No project link, only one release, and the maintainer released it shortly
        # after account registration.
        # The setup.py file contains suspicious imports.
    ): Confidence.HIGH,
    (
        HeuristicResult.FAIL,  # Empty Project
        HeuristicResult.SKIP,  # Unreachable Project Links
        HeuristicResult.FAIL,  # One Release
        HeuristicResult.SKIP,  # High Release Frequency
        HeuristicResult.SKIP,  # Unchanged Release
        HeuristicResult.FAIL,  # Closer Release Join Date
        HeuristicResult.PASS,  # Suspicious Setup
        # No project link, only one release, and the maintainer released it shortly
        # after account registration.
    ): Confidence.MEDIUM,
    (
        HeuristicResult.FAIL,  # Empty Project
        HeuristicResult.SKIP,  # Unreachable Project Links
        HeuristicResult.PASS,  # One Release
        HeuristicResult.FAIL,  # High Release Frequency
        HeuristicResult.FAIL,  # Unchanged Release
        HeuristicResult.FAIL,  # Closer Release Join Date
        HeuristicResult.FAIL,  # Suspicious Setup
        # No project link, frequent releases of multiple versions without modifying the content,
        # and the maintainer released it shortly after account registration.
        # The setup.py file contains suspicious imports.
    ): Confidence.HIGH,
    (
        HeuristicResult.FAIL,  # Empty Project
        HeuristicResult.SKIP,  # Unreachable Project Links
        HeuristicResult.PASS,  # One Release
        HeuristicResult.FAIL,  # High Release Frequency
        HeuristicResult.PASS,  # Unchanged Release
        HeuristicResult.FAIL,  # Closer Release Join Date
        HeuristicResult.FAIL,  # Suspicious Setup
        # No project link, frequent releases of multiple versions,
        # and the maintainer released it shortly after account registration.
        # The setup.py file contains suspicious imports.
    ): Confidence.HIGH,
    (
        HeuristicResult.FAIL,  # Empty Project
        HeuristicResult.SKIP,  # Unreachable Project Links
        HeuristicResult.PASS,  # One Release
        HeuristicResult.FAIL,  # High Release Frequency
        HeuristicResult.FAIL,  # Unchanged Release
        HeuristicResult.FAIL,  # Closer Release Join Date
        HeuristicResult.PASS,  # Suspicious Setup
        # No project link, frequent releases of multiple versions without modifying the content,
        # and the maintainer released it shortly after account registration.
    ): Confidence.MEDIUM,
    (
        HeuristicResult.FAIL,  # Empty Project
        HeuristicResult.SKIP,  # Unreachable Project Links
        HeuristicResult.PASS,  # One Release
        HeuristicResult.FAIL,  # High Release Frequency
        HeuristicResult.PASS,  # Unchanged Release
        HeuristicResult.FAIL,  # Closer Release Join Date
        HeuristicResult.PASS,  # Suspicious Setup
        # No project link, frequent releases of multiple versions,
        # and the maintainer released it shortly after account registration.
    ): Confidence.LOW,
    (
        HeuristicResult.PASS,  # Empty Project
        HeuristicResult.FAIL,  # Unreachable Project Links
        HeuristicResult.PASS,  # One Release
        HeuristicResult.FAIL,  # High Release Frequency
        HeuristicResult.PASS,  # Unchanged Release
        HeuristicResult.FAIL,  # Closer Release Join Date
        HeuristicResult.FAIL,  # Suspicious Setup
        # All project links are unreachable, frequent releases of multiple versions,
        # and the maintainer released it shortly after account registration.
        # The setup.py file contains suspicious imports.
    ): Confidence.HIGH,
    # (
    #     HeuristicResult.PASS,  # Empty Project
    #     HeuristicResult.FAIL,  # Unreachable Project Links
    #     HeuristicResult.PASS,  # One Release
    #     HeuristicResult.FAIL,  # High Release Frequency
    #     HeuristicResult.PASS,  # Unchanged Release
    #     HeuristicResult.FAIL,  # Closer Release Join Date
    #     HeuristicResult.PASS,  # Suspicious Setup
    #     # All project links are unreachable, frequent releases of multiple versions,
    #     # and the maintainer released it shortly after account registration.
    # ): Confidence.LOW,
}


class DetectMaliciousMetadataCheck(BaseCheck):
    """This check analyzes the metadata of the pypi package based on seven heuristics."""

    def __init__(self) -> None:
        """Initialize a check instance."""
        check_id = "mcn_detect_malicious_metadata_1"
        description = "Check whether the features of package adhere to the heuristics."
        super().__init__(
            check_id=check_id,
            description=description,
        )

    def _should_skip(
        self, results: dict[Heuristics, HeuristicResult], depends_on: list[tuple[Heuristics, HeuristicResult]]
    ) -> bool:
        """Determine whether a particular heuristic result should be skipped based on the provided dependency heuristics.

        Parameters
        ----------
        results: dict[Heuristics, HeuristicResult]
            Containing all heuristics' results, where the key is the heuristic and the value is the result
            associated with that heuristic.
        depends_on: list[tuple[Heuristics, HeuristicResult]]
            Containing heuristics that the current heuristic depends on, along with their expected results.

        Returns
        -------
        bool
            Returns True if any result of the dependency heuristic does not match the expected result.
            Otherwise, returns False.
        """
        for heuristic, expected_result in depends_on:
            dep_heuristic_result: HeuristicResult = results[heuristic]
            if dep_heuristic_result is not expected_result:
                return True
        return False

    def run_heuristics(
        self, api_client: PyPIRegistry
    ) -> tuple[dict[Heuristics, HeuristicResult], dict[str, int | dict]]:
        """Run the main logic of heuristics analysis.

        Parameters
        ----------
        api_client: PyPIRegistry
            The PyPI API client object used to interact with the PyPI API.

        Returns
        -------
        tuple[dict[Heuristics, HeuristicResult], dict[str, int | dict]]
            Containing the heuristics' results and relevant metadata.
        """
        results: dict[Heuristics, HeuristicResult] = {}
        detail_infos: dict[str, int | dict] = {}
        for _analyzer in ANALYZERS:
            analyzer: BaseHeuristicAnalyzer = _analyzer()
            logger.debug("Instantiating %s", _analyzer.__name__)
            depends_on: list[tuple[Heuristics, HeuristicResult]] | None = analyzer.depends_on

            if depends_on:
                should_skip: bool = self._should_skip(results, depends_on)
                if should_skip:
                    results[analyzer.heuristic] = HeuristicResult.SKIP
                    continue

            result, detail_info = analyzer.analyze(api_client)
            if analyzer.heuristic:
                results[analyzer.heuristic] = result
                detail_infos.update(detail_info)
        return results, detail_infos

    def run_check(self, ctx: AnalyzeContext) -> CheckResultData:
        """Implement the check in this method.

        Parameters
        ----------
        ctx : AnalyzeContext
            The object containing processed data for the target repo.

        Returns
        -------
        CheckResultData
            The result of the check.
        """
        parsed_purl = PackageURL.from_string(ctx.component.purl)
        if parsed_purl.type != "pypi":
            return CheckResultData(result_tables=[], result_type=CheckResultType.UNKNOWN)
        package = parsed_purl.name
        result_tables: list[CheckFacts] = []

        api_client: PyPIRegistry = PyPIRegistry()
        api_client.load_defaults()
        api_client.download_attestation_payload(package)
        result, detail_infos = self.run_heuristics(api_client)
        heuristics_fail: list[str] = [
            heuristic.value for heuristic, result in result.items() if result is HeuristicResult.FAIL
        ]
        result_combo: tuple = tuple(result.values())
        confidence: float | None = SUSPICIOUS_COMBO.get(result_combo, None)
        result_type = CheckResultType.FAILED
        if confidence is None:
            confidence = Confidence.HIGH
            result_type = CheckResultType.PASSED

        result_tables.append(
            HeuristicAnalysisResultFacts(
                heuristics_fail=str(heuristics_fail),
                heuristic_result=str(result),
                detail_information=str(detail_infos),
                confidence=confidence,
            )
        )

        return CheckResultData(
            result_tables=result_tables,
            result_type=result_type,
        )


registry.register(DetectMaliciousMetadataCheck())
