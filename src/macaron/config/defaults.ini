# Copyright (c) 2022 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

[runner]
# The number of runners. Macaron only supports one runner at the moment.
runner_num = 1
# The duration (in seconds) for the main thread to
# wait for a runner to complete its check. After this time period,
# that runner will be put back into the queue to keep running if it hasn't finished.
timeout = 5

[requests]
# The default timeout in seconds for 'requests' API calls.
timeout = 10

[downloads]
# The default timeout in seconds for downloading assets.
timeout = 120

# This is the database to store Macaron's results.
[database]
db_name = macaron.db

# This is the parser for GitHub Actions workflows.
[actionparser]
# This is the timeout (in seconds) for the actionparser.
timeout = 30

# This is the parser for bash scripts.
[bashparser]
# This is the timeout (in seconds) for the bashparser.
timeout = 30
# The maximum allowed recursion depth when scripts call other scripts.
recursion_depth = 3

[cue_validator]
# This is the timeout (in seconds) for the cue_validator.
timeout = 30

# This is the dependency resolver tool to generate SBOM.
[dependency.resolver]
# Should be in <tool>:<version> format.
# The supported tools for Maven is cyclonedx-maven.
# The supported tools for Gradle is cyclonedx-gradle.
# The version of the dependency resolver should conform with semantic versioning.
dep_tool_maven = cyclonedx-maven:2.6.2
dep_tool_gradle = cyclonedx-gradle:1.7.4
# This is the timeout (in seconds) to run the dependency resolver.
timeout = 2400
recursive = False

# This is the repo finder script.
[repofinder]
find_repos = True
use_open_source_insights = True
# These are URLs that are known to redirect to actual repository URLs.
redirect_urls =
    gitbox.apache.org
    git-wip-us.apache.org

[repofinder.java]
# The list of maven-like repositories to attempt to retrieve artifact POMs from.
artifact_repositories = https://repo.maven.apache.org/maven2
# The repo_pom_paths list is a priority list. The first path that produces a valid URL will be returned as the result.
repo_pom_paths =
    scm.url
    scm.connection
    scm.developerConnection
find_parents = True
parent_limit = 10

# Git services that Macaron has access to clone repositories.
# For security purposes, Macaron will only clone repositories from the hostnames specified.

# Access to GitHub is required in most case for Macaron to analyse not only the main
# repo but also its dependencies.
[git_service.github]
hostname = github.com

# Access to public GitLab (gitlab.com).
# An optional access token can be provided through the `MCN_GITLAB_TOKEN` environment variable.
# This access token is optional, only necessary when you need to clone private repositories.
# The `read_repository` permission is required for this token.
[git_service.gitlab.publicly_hosted]
hostname = gitlab.com

# Access to a self-hosted GitLab instance (e.g. your organization's self-hosted GitLab instance).
# If this section is enabled, an access token must be provided through the `MCN_SELF_HOSTED_GITLAB_TOKEN` environment variable.
# The `read_repository` permission is required for this token.
# [git_service.gitlab.self_hosted]
# hostname = example.org

# This is the spec for trusted Maven build tools.
[builder.maven]
entry_conf = settings.xml
build_configs = pom.xml
builder =
    mvn
    mvnw
build_arg =
    # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html.
    package
    verify
    install
    # We should also check for Default Lifecycle Bindings.
    # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html.
    ejb:ejb
    ejb3:ejb3
    jar:jar
    par:par
    rar:rar
    war:war
    install:install
    # Core plugins: https://maven.apache.org/plugins/index.html.
    verifier:verify
    install: install
deploy_arg =
    # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html.
    deploy
    # See https://maven.apache.org/plugins/maven-gpg-plugin/.
    gpg:sign-and-deploy-file
    # See https://maven.apache.org/plugins/maven-deploy-plugin/.
    deploy:deploy
    deploy:deploy-file
    # Plugins see https://github.com/sonatype/nexus-maven-plugins/tree/main/staging/maven-plugin.
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    # See https://help.sonatype.com/repomanager3/integrations/nexus-repository-maven-plugin.
    nxrm3:staging-deploy
build_log = Apache Maven
wrapper_files =
    .mvn/wrapper/maven-wrapper.jar
    .mvn/wrapper/maven-wrapper.properties
    .mvn/wrapper/MavenWrapperDownloader.java
    mvnw

[builder.maven.ci.build]
github_actions = actions/setup-java
travis_ci = jdk
circle_ci =
gitlab_ci =
jenkins =
    withMaven
    buildPlugin
    asfMavenTlpStdBuild
    ./mvnw
    ./mvn

[builder.maven.ci.deploy]
github_actions =
travis_ci =
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy
circle_ci =
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy
gitlab_ci =
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy
# See https://plugins.jenkins.io/configuration-as-code/.
jenkins =
    artifactsPublisher
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy

# This is the spec for trusted Gradle build tools.
[builder.gradle]
entry_conf =
    settings.gradle
    settings.gradle.kts
build_configs =
    build.gradle
    build.gradle.kts
builder =
    gradle
    gradlew
build_arg =
    build
deploy_arg =
    artifactoryPublish
    publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
build_log = gradle
wrapper_files =
    gradle/wrapper/gradle-wrapper.jar
    gradle/wrapper/gradle-wrapper.properties
    gradlew

[builder.gradle.ci.build]
github_actions = actions/setup-java
travis_ci =
    jdk
    ./gradlew
circle_ci =
    ./gradlew
gitlab_ci =
    ./gradlew
jenkins =
    ./gradlew

[builder.gradle.ci.deploy]
github_actions =
travis_ci =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
circle_ci =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
gitlab_ci =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
jenkins =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush

[builder.gradle.runtime]
# This is the timeout (in seconds) to run the build tool.
build_timeout = 600

# This is the spec for trusted Pip packaging tools.
[builder.pip]
entry_conf =
build_configs =
    setup.py
    setup.cfg
    pyproject.toml
packager =
    pip
    pip3
    flit
    conda
publisher =
    twine
    flit
    conda
    tox
# These are the Python interpreters that may be used to load modules.
interpreter =
    python
    python3
interpreter_flag =
    -m
build_arg =
    build
    setup.py
deploy_arg =
    publish
    upload

[builder.pip.ci.deploy]
github_actions = pypa/gh-action-pypi-publish

# This is the spec for trusted Poetry packaging tools.
[builder.poetry]
entry_conf =
build_configs = pyproject.toml
package_lock = poetry.lock
builder =
    poetry
    poetry-core
# These are the Python interpreters that may be used to load modules.
interpreter =
    python
    python3
interpreter_flag =
    -m
build_arg =
    build
deploy_arg =
    publish

[builder.poetry.ci.deploy]
github_actions = pypa/gh-action-pypi-publish

# This is the spec for trusted Docker build tool usages.
[builder.docker]
entry_conf =
# Also account for if there's multiple dockerfiles, e.g. test.Dockerfile
build_configs =
    Dockerfile
    Dockerfile.*
    *.Dockerfile
builder =
    docker
build_arg =
    build
deploy_arg =
    push
[builder.docker.ci.deploy]
github_actions =
    docker/build-push-action

# This is the spec for trusted NPM build tool usages.
# This also includes the spec for pnpm, since for the purposes of this program
# they work more or less the same.
[builder.npm]
entry_conf =
    .npmrc
build_configs =
    package.json
package_lock =
    package-lock.json
    pnpm-lock.yaml
builder =
    npm
    pnpm
build_arg =
    install
build_run_arg =
    build
deploy_arg =
    publish
deploy_run_arg =
    publish
[builder.npm.ci.deploy]
github_actions =
    JS-DevTools/npm-publish
    # TODO: check the `publish` input to changesets/action to improve accuracy.
    # See https://github.com/changesets/action#inputs
    changesets/action

# This is the spec for trusted Yarn build tool usages.
# The entries need to cover both Yarn classic and Yarn modern; namely .yarnrc vs .yarnrc.yml
# for the entry configs, publish vs npm publish for the deploy args, and yarn.lock for
# Yarn classic's package lock.
# See https://yarnpkg.com/migration/guide and https://classic.yarnpkg.com/lang/en/docs/yarn-lock/
# Currently npm publish is not supported here due to the multiple arguments; see issue #493.
[builder.yarn]
entry_conf =
    .yarnrc
    .yarnrc.yml
build_configs =
    package.json
package_lock =
    package-lock.json
    yarn.lock
builder =
    yarn
build_arg =
    build
build_run_arg =
    build
deploy_arg =
    publish
deploy_run_arg =
    publish

# This is the spec for trusted Go build tool usages.
[builder.go]
entry_conf =
build_configs =
    go.mod
    go.sum
    .goreleaser.yaml
    .goreleaser.yml
builder =
    go
build_arg =
    build
    install
# Goreleaser will be taken as publisher as per https://github.com/oracle/macaron/milestone/14
publisher =
    goreleaser
deploy_arg =
    release
[builder.go.ci.deploy]
github_actions =
    goreleaser/goreleaser-action

# This is the spec for GitHub Actions CI.
[ci.github_actions]
entry_conf =
    .github/workflows
query_page_threshold = 10
max_items_num = 100
# Trusted SLSA builders: https://github.com/slsa-framework/slsa-github-generator/tree/main#builders
trusted_builders =
    slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml
    slsa-framework/slsa-github-generator/.github/workflows/builder_gradle_slsa3.yml
    slsa-framework/slsa-github-generator/.github/workflows/builder_maven_slsa3.yml
    slsa-framework/slsa-github-generator/.github/workflows/builder_nodejs_slsa3.yml
    slsa-framework/slsa-github-generator/.github/workflows/builder_container-based_slsa3.yml
# The number of days that GitHub Actions persists the workflow run.
max_workflow_persist = 90
# The GitHub Actions configuration workflow files for third-party tools.
third_party_configurations =
    codeql-analysis.yaml
    codeql-analysis.yml
    codeql-config.yaml
    codeql-config.yml
    scorecards-analysis.yaml
    scorecards-analysis.yml
    dependabot.yaml
    dependabot.yml
    renovate.json

# This is the spec for Jenkins CI.
[ci.jenkins]
entry_conf =
    Jenkinsfile

# This is the spec for Travis CI.
[ci.travis_ci]
entry_conf =
    .travis.yml
    .travis.yaml

# This is the spec for Circle CI.
[ci.circle_ci]
entry_conf =
    .circleci/config.yml
    .circleci/config.yaml

# This is the spec for GitLab CI.
[ci.gitlab_ci]
entry_conf =
    .gitlab-ci.yml
    .gitlab-ci.yaml

# Configuration options for SLSA verifier.
[slsa.verifier]
provenance_extensions =
    intoto.jsonl
    intoto.jsonl.gz
# This is the acceptable maximum size (in bytes) to download an asset.
max_download_size = 70000000
# This is the timeout (in seconds) to run the SLSA verifier.
timeout = 120

# Witness provenance. See: https://github.com/testifysec/witness.
[provenance.witness]
# The allowed values of the `predicateType` field in the provenance (data type: list).
# For more details, see:
# https://github.com/in-toto/attestation/tree/main/spec/v0.1.0#statement
predicate_types =
    https://witness.testifysec.com/attestation-collection/v0.1
artifact_extensions =
    jar
# Package registries.
[package_registry]
# The allowed time range (in seconds) from a deploy workflow run start time to publish time.
publish_time_range = 3600

# [package_registry.jfrog.maven]
# In this example, the Maven repo can be accessed at `https://internal.registry.org/repo-name`.
# hostname = internal.registry.org
# repo = repo-name
# download_timeout = 120

[package_registry.maven_central]
# Maven Central host name.
hostname = search.maven.org
# The search REST API. See https://central.sonatype.org/search/rest-api-guide/
search_endpoint = solrsearch/select
request_timeout = 20

[package_registry.npm]
# Set `enabled=False` to disable making REST API calls to the npm registry.
enabled = True
# npm registry host name.
hostname = registry.npmjs.org
# The attestation REST API.
attestation_endpoint = -/npm/v1/attestations
request_timeout = 20

# Configuration options for selecting the checks to run.
# Both the exclude and include are defined as list of strings:
#   - The exclude list is used to specify the checks that will not run.
#   - The include list is used to specify the checks that should run. The checks that are not specified by "include" will be excluded.
# The final list of checks to run will always be "include" minus "exclude".
# Each element of a list is either the full ID of a check (e.g mcn_build_as_code_1) or a glob pattern
# (https://docs.python.org/3/library/fnmatch.html) to match multiple check IDs (e.g "mcn_*" will match all default
# Macaron checks).
# Examples
# 1. Exclude 1 check:
# ```
# [analysis.checks]
# exclude = mcn_build_as_code_1
# include = *
# ```
# 2. Exclude multiple checks:
# ```
# [analysis.checks]
# exclude =
#     mcn_build_as_code_1
#     mcn_provenance_level_three_1
# include = *
# ```
# 3. Exclude multiple checks that start with `mcn_provenance`:
# ```
# [analysis.checks]
# exclude =
#     mcn_provenance*
# include = *
# ```
[analysis.checks]
# By default, we don't exclude any checks.
exclude =
# By default, we run all checks available.
include = *
