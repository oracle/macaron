# Copyright (c) 2022 - 2023, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

[runner]
# The number of runners. Macaron only supports one runner at the moment.
runner_num = 1
# The duration (in seconds) for the main thread to
# wait for a runner to complete its check. After this time period,
# that runner will be put back into the queue to keep running if it hasn't finished.
timeout = 5

[requests]
# The default timeout in seconds for 'requests' API calls.
timeout = 10

# This is the database to store Macaron's results.
[database]
db_name = macaron.db

# This is the parser for GitHub Actions workflows.
[actionparser]
# This is the timeout (in seconds) for the actionparser.
timeout = 30

# This is the parser for bash scripts.
[bashparser]
# This is the timeout (in seconds) for the bashparser.
timeout = 30

[cue_validator]
# This is the timeout (in seconds) for the cue_validator.
timeout = 30

# This is the dependency resolver tool to generate SBOM.
[dependency.resolver]
# Should be in <tool>:<version> format.
# The supported tools for Maven is cyclonedx-maven.
# The supported tools for Gradle is cyclonedx-gradle.
# The version of the dependency resolver should conform with semantic versioning.
dep_tool_maven = cyclonedx-maven:2.6.2
dep_tool_gradle = cyclonedx-gradle:1.7.4
# This is the timeout (in seconds) to run the dependency resolver.
timeout = 2400
recursive = False

# This is the repo finder script.
[repofinder.java]
# The list of maven-like repositories to attempt to retrieve artifact POMs from.
artifact_repositories = https://repo.maven.apache.org/maven2
find_repos = True
repo_pom_paths =
    scm.url
    scm.connection
    scm.developerConnection
find_parents = True
parent_limit = 10
# Disables repo finding for specific artifacts based on their group and artifact IDs. Format: {groupId}:{artifactId}
# E.g. com.oracle.coherence.ce:coherence
artifact_ignore_list =

# Git services that Macaron has access to clone repositories.
# For security purposes, Macaron will only clone repositories from the domains specified.

# Access to GitHub is required in most case for Macaron to analyse not only the main
# repo but also its dependencies.
[git_service.github]
domain = github.com

# Access to public GitLab (gitlab.com).
# An optional access token can be provided through the `MCN_GITLAB_TOKEN` environment variable.
# This access token is optional, only necessary when you need to clone private repositories.
# The `read_repository` permission is required for this token.
[git_service.gitlab.publicly_hosted]
domain = gitlab.com

# Access to a self-hosted GitLab instance (e.g. your organization's self-hosted GitLab instance).
# If this section is enabled, an access token must be provided through the `MCN_SELF_HOSTED_GITLAB_TOKEN` environment variable.
# The `read_repository` permission is required for this token.
# [git_service.gitlab.self_hosted]
# domain = example.org

# This is the spec for trusted Maven build tools.
[builder.maven]
entry_conf = settings.xml
build_configs = pom.xml
builder =
    mvn
    mvnw
build_arg =
    # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html.
    package
    verify
    install
    # We should also check for Default Lifecycle Bindings.
    # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html.
    ejb:ejb
    ejb3:ejb3
    jar:jar
    par:par
    rar:rar
    war:war
    install:install
    # Core plugins: https://maven.apache.org/plugins/index.html.
    verifier:verify
    install: install
deploy_arg =
    # See https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html.
    deploy
    # See https://maven.apache.org/plugins/maven-gpg-plugin/.
    gpg:sign-and-deploy-file
    # See https://maven.apache.org/plugins/maven-deploy-plugin/.
    deploy:deploy
    deploy:deploy-file
    # Plugins see https://github.com/sonatype/nexus-maven-plugins/tree/main/staging/maven-plugin.
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    # See https://help.sonatype.com/repomanager3/integrations/nexus-repository-maven-plugin.
    nxrm3:staging-deploy

build_log = Apache Maven
wrapper_files =
    .mvn/wrapper/maven-wrapper.jar
    .mvn/wrapper/maven-wrapper.properties
    .mvn/wrapper/MavenWrapperDownloader.java
    mvnw

[builder.maven.ci.build]
github_actions = actions/setup-java
travis_ci = jdk
circle_ci =
gitlab_ci =
jenkins =
    withMaven
    buildPlugin
    asfMavenTlpStdBuild
    ./mvnw
    ./mvn

[builder.maven.ci.deploy]
github_actions =
travis_ci =
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy
circle_ci =
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy
gitlab_ci =
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy
# See https://plugins.jenkins.io/configuration-as-code/.
jenkins =
    artifactsPublisher
    gpg:sign-and-deploy-file
    deploy:deploy
    deploy:deploy-file
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy
    org.sonatype.plugins:nexus-staging-maven-plugin:release
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged
    org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged-repository
    nxrm3:staging-deploy

# This is the spec for trusted Gradle build tools.
[builder.gradle]
entry_conf =
    settings.gradle
    settings.gradle.kts
build_configs =
    build.gradle
    build.gradle.kts
builder =
    gradle
    gradlew
build_arg =
deploy_arg =
    artifactoryPublish
    publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
build_log = gradle
wrapper_files =
    gradle/wrapper/gradle-wrapper.jar
    gradle/wrapper/gradle-wrapper.properties
    gradlew

[builder.gradle.ci.build]
github_actions = actions/setup-java
travis_ci =
    jdk
    ./gradlew
circle_ci =
    ./gradlew
gitlab_ci =
    ./gradlew
jenkins =
    ./gradlew

[builder.gradle.ci.deploy]
github_actions =
travis_ci =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
circle_ci =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
gitlab_ci =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush
jenkins =
    artifactoryPublish
    ./gradlew publish
    publishToSonatype
    gradle-git-publish
    gitPublishPush

# This is the spec for trusted Pip packaging tools.
[builder.pip]
entry_conf =
build_configs =
    setup.py
    setup.cfg
    pyproject.toml
packager =
    pip
    pip3
    flit
    conda
publisher =
    twine
    flit
    conda
# These are the Python interpreters that may be used to load modules.
interpreter =
    python
    python3
interpreter_flag =
    -m
build_arg =
    install
    build
    setup.py
deploy_arg =
    publish
    upload
[builder.pip.ci.deploy]
github_actions = pypa/gh-action-pypi-publish

# This is the spec for trusted Poetry packaging tools.
[builder.poetry]
entry_conf =
build_configs = pyproject.toml
package_lock = poetry.lock
builder =
    poetry
    poetry-core
# These are the Python interpreters that may be used to load modules.
interpreter =
    python
    python3
interpreter_flag =
    -m
build_arg =
    build
deploy_arg =
    publish
[builder.poetry.ci.deploy]
github_actions = pypa/gh-action-pypi-publish

# This is the spec for GitHub Actions CI.
[ci.github_actions]
entry_conf =
    .github/workflows
query_page_threshold = 10
max_items_num = 100
trusted_builders =
    slsa-framework/slsa-github-generator/.github/workflows/builder_go_slsa3.yml
# The number of days that GitHub Actions persists the workflow run.
max_workflow_persist = 90

# This is the spec for Jenkins CI.
[ci.jenkins]
entry_conf =
    Jenkinsfile

# This is the spec for Travis CI.
[ci.travis_ci]
entry_conf =
    .travis.yml
    .travis.yaml

# This is the spec for Circle CI.
[ci.circle_ci]
entry_conf =
    .circleci/config.yml
    .circleci/config.yaml

# This is the spec for GitLab CI.
[ci.gitlab_ci]
entry_conf =
    .gitlab-ci.yml
    .gitlab-ci.yaml

# Configuration options for SLSA verifier.
[slsa.verifier]
provenance_extensions =
    intoto.jsonl
# This is the acceptable maximum size (in bytes) to download an asset.
max_download_size = 70000000
# This is the timeout (in seconds) to run the SLSA verifier.
timeout = 120

# Witness provenance. See: https://github.com/testifysec/witness.
[provenance.witness]
# The allowed values of the `predicateType` field in the provenance (data type: list).
# For more details, see:
# https://github.com/in-toto/attestation/tree/main/spec/v0.1.0#statement
predicate_types =
    https://witness.testifysec.com/attestation-collection/v0.1
artifact_extensions =
    jar

# Package registries.
# [package_registry.jfrog.maven]
# In this example, the Maven repo can be accessed at `https://internal.registry.org/repo-name`.
# hostname = internal.registry.org
# repo = repo-name
# download_timeout = 120
