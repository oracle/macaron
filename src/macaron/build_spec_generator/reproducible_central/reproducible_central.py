# Copyright (c) 2025 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This module contains the logic to generate a build spec in the Reproducible Central format."""

import logging
from enum import Enum

import importlib_metadata

from macaron.build_spec_generator.common_spec.base_spec import BaseBuildSpecDict
from macaron.build_spec_generator.common_spec.core import compose_shell_commands
from macaron.errors import GenerateBuildSpecError

logger: logging.Logger = logging.getLogger(__name__)

# We use a subset of available config options from
# https://github.com/jvm-repo-rebuild/reproducible-central/blob/master/doc/BUILDSPEC.md
# An example:
#   https://github.com/jvm-repo-rebuild/reproducible-central/blob/master/content/com/google/guava/guava-32.0.0-android.buildspec
# About this template
#   - Because the Reproducible-Central build spec is a bash script by itself, we can use
#     Bash comment syntax.
#   - We only work with git repository and its commit hash. Therefore `gitRepo` and `gitTag` are used only.
#     Even though it's called gitTag, a commit hash would work.
#     https://github.com/jvm-repo-rebuild/reproducible-central/blob/46de9b405cb30ff94effe0ba47c1ebecc5a1c17e/bin/includes/fetchSource.sh#L59C1-L59C72
STRING_TEMPLATE = """
# Generated by Macaron version {macaron_version}

groupId={group_id}
artifactId={artifact_id}
version={version}

gitRepo={git_repo}

gitTag={git_tag}

tool={tool}
jdk={jdk}

newline={newline}

command="{command}"

buildinfo={buildinfo}
"""


class ReproducibleCentralBuildTool(str, Enum):
    """Represent the name of the build tool used in the Reproducible Central's Buildspec.

    https://github.com/jvm-repo-rebuild/reproducible-central/blob/master/doc/BUILDSPEC.md
    """

    MAVEN = "mvn"
    GRADLE = "gradle"


def gen_reproducible_central_build_spec(build_spec: BaseBuildSpecDict) -> str | None:
    """Translate the build specification to ensure compatibility with Reproducible Central.

    The Reproducible Central Buildspec File Format can be found here:
    https://github.com/jvm-repo-rebuild/reproducible-central/blob/e1708dd8dde3cdbe66b0cec9948812b601e90ba6/doc/BUILDSPEC.md#format

    Parameters
    ----------
    build_spec: BaseBuildSpecDict
        The base build spec generated for the Maven artifact.

    Returns
    -------
    str
        The generated build spec content.

    Raises
    ------
    GenerateBuildSpecError
        Raised if generation of the build spec fails.
    """
    if build_spec["build_tool"].upper() not in (e.name for e in ReproducibleCentralBuildTool):
        raise GenerateBuildSpecError(
            f"Build tool {build_spec['build_tool']} is not supported by Reproducible Central. "
            f"Supported build tools: {[build.name for build in ReproducibleCentralBuildTool]}"
        )
    if build_spec["group_id"] is None:
        raise GenerateBuildSpecError(f"Version is missing in PURL {build_spec['purl']}")

    template_format_values: dict[str, str] = {
        "macaron_version": importlib_metadata.version("macaron"),
        "group_id": build_spec["group_id"],
        "artifact_id": build_spec["artifact_id"],
        "version": build_spec["version"],
        "git_repo": build_spec["git_repo"],
        "git_tag": build_spec["git_tag"],
        "tool": ReproducibleCentralBuildTool[build_spec["build_tool"].upper()].value,
        "newline": build_spec["newline"],
        "buildinfo": f"target/{build_spec['artifact_id']}-{build_spec['version']}.buildinfo",
        "jdk": build_spec["language_version"],
        "command": compose_shell_commands(build_spec["build_commands"]),
    }

    return STRING_TEMPLATE.format_map(template_format_values)
