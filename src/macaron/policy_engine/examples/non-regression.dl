/* Copyright (c) 2023 - 2023, Oracle and/or its affiliates. All rights reserved. */
/* Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/. */


#include "prelude.dl"

/**
 * This example policy shows how to enforce that checks do not regress from a specific point.
 *
 * Here we specify that all checks that passed on the repositories in analysis 8, must always pass on the same
 * repositories when they are later analysed later.
 */

 #define REFERENCE_ANALYSIS_ID 8

Policy("non-regression", repo_id, "") :-
   reference_analysis = REFERENCE_ANALYSIS_ID,
   is_repo(repo_id, repo_name, component_id),
   analysis(reference_analysis, timestamp, macaron_ver),
   // There are no checks that passed on the reference repo that did not pass on
   // this repo
   0 = count : {
        repository_analysis(reference_analysis, analysis_component_id, analysis_repo_id, repo_name),
        check_passed(analysis_component_id, check_id),
        !check_passed(component_id, check_id)
    }.

apply_policy_to("non-regression", repo_id) :-
   reference_analysis = REFERENCE_ANALYSIS_ID,
   // enforce any time we analyse a repo with the same name in a subsequent
   // analysis
   repository_analysis(reference_analysis, _, repo_in_ref_analysis, repo_name),
   repository_analysis(other_analysis, _, repo_id, repo_name),
   other_analysis > REFERENCE_ANALYSIS_ID.// depends on keys being sequential
