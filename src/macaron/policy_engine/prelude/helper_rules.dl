/* Copyright (c) 2023 - 2023, Oracle and/or its affiliates. All rights reserved. */
/* Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/. */

/* Souffle datalog rules to assist in policy authoring */

/**
 * Existence of this fact indicates a check with the id check_name was passed on the repository with the id repo.
 */
.decl check_passed(repo: number, check_name: symbol)
check_passed(repo, check_name) :- check_result(_, check_name, repo, 1, skipped).

/**
 * Existence of this fact indicates a check with the id check_name was skipped on the repository with the id repo.
 */
.decl check_skipped(repo: number, check_name: symbol)
check_skipped(repo, check_name) :- check_result(_, check_name, repo, passed, 1).

/**
 * Check name is valid.
 */
.decl is_check(check_name: symbol)
is_check(check_name) :- check_result(_, check_name, _, _, _).

/**
 *  This fact exists iff a repository is hosted on a trusted public platform.
 */
.decl not_self_hosted_git(repo:number, message:symbol)
not_self_hosted_git(repo, message) :- repository(repo, name, remote, branch, release, commit_sha, commit_date),
    match("^.*(github.com|gitlab.com).*$", remote), message=remote.

/**
 *  This fact exists iff a repository with id dependency is a dependency of repository with id repo.
 */
.decl transitive_dependency(repo: number, dependency: number)
transitive_dependency(repo, dependency) :- dependency(repo, dependency).
transitive_dependency(repo, dependency) :-
    transitive_dependency(repo, a), transitive_dependency(a, dependency).

/**
 *  Extract the id and full name from the repository relation.
 */
.decl is_repo(repo: number, repo_full_name: symbol)
 is_repo(repo, name) :- repository(repo, name,_,_,_,_,_).

/**
 *  ADT recursively describing a JSON object.
 */
.type JsonType = Int {x : number}
         | String {x : symbol}
         | Float {x : float}
         | Bool {x : number}
         | null {}
         | Object {x: symbol, y : JsonType}
         | Array {x : number, y : JsonType}

/**
 * Rules for referring to parts of a json type using the full path name.
 */

.decl json(name: symbol, id: number, root: JsonType)


.decl json_path(j: JsonType, a: JsonType, key:symbol)

json_path(a, b, key) :- a = $Object(k, b), json(name,_,a), key=cat(name, cat(".", k)).
json_path(a, b, key) :- a = $Array(k, b), json(name,_,a), key=cat(name, cat("[", cat(to_string(k), "]"))).

json_path(a, b, key) :- a = $Object(k, b), json(_,_,c), json_path(c,a,kb), key=cat(cat(kb, "."),k).
json_path(a, b, key) :- a = $Array(k, b), json(_,_,c), json_path(c,a,kb),key=cat(kb, cat(cat("[",to_string(k)), "]")).

json_path(a, b,key) :- json_path(a,c,_), json_path(c, b, kb), key=kb.

.decl json_number(name: symbol, json:number, addr: symbol, k:number)
.decl json_symbol(name:symbol, json:number, addr: symbol, k:symbol)

json_number(name, js, addr, val) :- json(name, js, r), json_path(r, $Int(val), addr).
json_symbol(name, js, addr, val) :- json(name, js, r), json_path(r, $String(val), addr).
