/* Copyright (c) 2023 - 2024, Oracle and/or its affiliates. All rights reserved. */
/* Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/. */

/**
 *  Relations for creating policies about repositories, and controlling which repositories must satisfy their
 *  requirements.
 */

/*
 * Restrict the policy evaluation to a specific set of analyses.
 */
.decl restrict_to_analysis(analysis_id: number)
.decl apply_to_analysis(analysis_id: number)
apply_to_analysis(analysis_id) :-
    analysis(analysis_id, _, _),
    restrict_to_analysis(analysis_id).
apply_to_analysis(analysis_id) :-
    analysis(analysis_id, _, _),
    !restrict_to_analysis(_).


/**
 *   A policy that specifies a set of rules about repositories.
 *
 *      policy_id: The unique identifier for this policy.
 *      component_id: the id of a software component.
 *      message: The policy description.
 */
.decl Policy(policy_id: symbol, component_id: number, message: symbol)

/**
 *  Specifies that a software component must satisfy the policy policy_id: that the fact Policy(policy_id, component_id, message)
 *  must exist.
 */
.decl apply_policy_to(policy_id: symbol, component_id: number)

/*
 * Check policy constraints IFF it is applied to the component AND the component is part of the analysis being checked.
 */
.decl policy_applies_to(policy_id: symbol, component_id: number)
policy_applies_to(policy_id, component_id) :-
    apply_policy_to(policy_id, component_id),
    apply_to_analysis(analysis_id),
    component_analysis(analysis_id, component_id).

/**
 *  Policies that are applied to a component and the requirements are not met.
 */
.decl failed_policies(policy_id:symbol)
failed_policies(policy_id) :-
    // policy applies to the component and failed
    policy_applies_to(policy_id, component_id),
    !Policy(policy_id, component_id, _).

/**
 *  Policies that are applied to a component and all requirements are met.
 */
.decl passed_policies(policy_id: symbol)
passed_policies(policy_id) :-
    Policy(policy_id, component_id, _),
    policy_applies_to(policy_id, component_id),
    // policy passes on all components it applies to
    !failed_policies(policy_id).

.decl component_satisfies_policy(component_id: number, purl: symbol, policy_id: symbol)
.decl component_violates_policy(component_id: number, purl: symbol, policy_id: symbol)

component_satisfies_policy(component_id, purl, policy_id) :-
    policy_applies_to(policy_id, component_id),
    Policy(policy_id, component_id, _),
    is_component(component_id, purl).

component_violates_policy(component_id, purl, policy_id) :-
    policy_applies_to(policy_id, component_id),
    is_component(component_id, purl),
    !Policy(policy_id, component_id, _).

.output passed_policies
.output failed_policies
.output component_satisfies_policy
.output component_violates_policy
