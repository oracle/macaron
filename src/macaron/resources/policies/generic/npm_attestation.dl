/* Copyright (c) 2024 - 2024, Oracle and/or its affiliates. All rights reserved. */
/* Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/. */

#include "prelude.dl"

Policy("test_policy", component_id, "") :-
    // Checks if the npm attestation has been successfully processed.
    check_passed(component_id, "mcn_npm_attestation_validation_1"),
    // This relation provides the external parameters of a SLSA v1 provenance generated by npm.
    slsa_v1_npm_external_parameters(component_id, purl, ref, repository, path),
    // This relation provides the internal parameters of a SLSA v1 provenance generated by npm.
    slsa_v1_npm_internal_parameters(component_id, purl, event_name, repository_id, repository_owner_id),
    // This match constraint makes sure the subjects we are interested in exist in the provenance.
    match("pkg:npm/semver@.*", purl),
    // Here we can add constraints that we are interested in.
    approved_refs(ref),
    approved_repository_owner_ids(repository_owner_id),
    repository = "https://github.com/npm/node-semver",
    path = ".github/workflows/release.yml".

Policy("test_policy", component_id, "") :-
    // Checks if the npm attestation has been successfully processed.
    check_passed(component_id, "mcn_npm_attestation_validation_1"),
    // Checks if the repository URL in the provenance matches the repository metadata on deps.dev.
    check_passed(component_id, "mcn_provenance_derived_repo_1"),
    // Checks if the commit hash in the provenance matches the release tag.
    check_passed(component_id, "mcn_provenance_derived_commit_1"),
    // This relation provides the external parameters of a SLSA v1 provenance generated by npm.
    slsa_v1_npm_external_parameters(component_id, purl, ref, repository, path),
    // This relation provides the internal parameters of a SLSA v1 provenance generated by npm.
    slsa_v1_npm_internal_parameters(component_id, purl, event_name, repository_id, repository_owner_id),
    // This match constraint makes sure the subjects we are interested in exist in the provenance.
    match("pkg:npm/semver@.*", purl),
    // Here we can add constraints that we are interested in.
    approved_refs(ref),
    approved_repository_owner_ids(repository_owner_id),
    path = ".github/workflows/release.yml".

// Create a relation containing the approved Git branches for publishing the artifact.
.decl approved_refs(name: symbol)
    approved_refs("refs/heads/main").
    approved_refs("refs/heads/master").
    approved_refs("refs/heads/release").

// Create a relation containing the approved repository owner IDs for publishing the artifact.
.decl approved_repository_owner_ids(name: symbol)
    approved_repository_owner_ids("6078720").
    approved_repository_owner_ids("71096353").

// Apply the policy to the desired software components.
apply_policy_to("test_policy", component_id) :-
    is_component(component_id, purl),
    match("pkg:npm/semver@.*", purl).
