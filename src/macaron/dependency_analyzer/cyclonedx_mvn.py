# Copyright (c) 2022 - 2024, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""This module processes the JSON dependency output files generated by CycloneDX Maven plugin.

It also collects the direct dependencies that should be processed by Macaron.
See https://github.com/CycloneDX/cyclonedx-maven-plugin.
"""

import glob
import logging
import os
from pathlib import Path

from cyclonedx.model.component import Component as CDXComponent
from packageurl import PackageURL

from macaron.config.defaults import defaults
from macaron.database.table_definitions import Component
from macaron.dependency_analyzer.cyclonedx import DependencyAnalyzer, DependencyInfo

logger: logging.Logger = logging.getLogger(__name__)


class CycloneDxMaven(DependencyAnalyzer):
    """This class implements the CycloneDX Maven plugin analyzer."""

    def get_cmd(self) -> list:
        """Return the CLI command to run the CycloneDX Maven plugin.

        Returns
        -------
        list
            The command line arguments.
        """
        logger.info(
            (
                "The SBOM generator has started resolving the dependencies and storing them in %s files. "
                "This might take a while..."
            ),
            self.file_name,
        )
        return [
            os.path.join(self.resources_path, "mvnw"),
            f"org.cyclonedx:cyclonedx-maven-plugin:{self.tool_version}:makeAggregateBom",
            "-D",
            "includeTestScope=true",
        ]

    def collect_dependencies(self, dir_path: str, target_component: Component) -> dict[str, DependencyInfo]:
        """Process the dependency JSON files and collect direct dependencies.

        We allow the dependency JSON files to be accepted as long as there is only one JSON file in the target
        directory. If a file with the expected name is found, it is accepted, otherwise any lone file is accepted
        instead. This is because projects can be configured to produce a custom named SBOM, which cannot be
        overridden if included at the parent POM level. The presence of multiple JSON files within a target directory
        differs too greatly from the expectations of the plugin's output. It is for this reason that an error is
        thrown in such cases.

        Parameters
        ----------
        dir_path : str
            Local path to the target repo.
        target_component: Component
            The analyzed target software component.

        Returns
        -------
        dict
            A dictionary where artifacts are grouped based on "artifactId:groupId".
        """
        # Load the top level file separately as it has different content.
        top_path = Path(os.path.join(dir_path, "target", self.file_name))
        top_path_altered = False
        if not os.path.exists(top_path):
            # Check for other JSON files.
            possible_paths = glob.glob(os.path.join(dir_path, "target", "*.json"))
            if not possible_paths:
                logger.debug("No JSON files found in target directory.")
                return {}
            if len(possible_paths) > 1:
                logger.debug("Too many JSON SBOM files found. Expected: 1, Found: %s", len(possible_paths))
                return {}
            top_path = Path(possible_paths[0])
            top_path_altered = True

        # Collect all the dependency files recursively.
        child_paths = [
            Path(path)
            for path in glob.glob(
                os.path.join(dir_path, "**", "target", "*.json" if top_path_altered else self.file_name), recursive=True
            )
            if Path(path) != top_path
        ]

        # Ensure recursively found SBOMs are at most one per directory.
        child_sbom_dir_names = set()
        for path in child_paths:
            child_sbom_dir_names.add(path.parent)
        if len(child_sbom_dir_names) != len(child_paths):
            logger.debug("Only one JSON SBOM file is permitted per child directory.")
            return {}

        # Check if the root BOM has been analyzed before as a child BOM.
        self.visited_deps.update(child_paths)
        if top_path in self.visited_deps:
            return {}

        root_component = self.get_root_component(top_path)
        components = self.get_dep_components(
            target_component,
            top_path,
            child_paths,
            recursive=defaults.getboolean(
                "dependency.resolver",
                "recursive",
                fallback=False,
            ),
        )
        return self.convert_components_to_artifacts(components, root_component)

    def remove_sboms(self, dir_path: str) -> bool:
        """Remove all the SBOM files in the provided directory recursively.

        Parameters
        ----------
        dir_path : str
            Path to the repo.

        Returns
        -------
        bool
            Returns True if all the files are removed successfully.
        """
        removed_all = True
        for path in glob.glob(os.path.join(dir_path, "**", "target", self.file_name), recursive=True):
            try:
                os.remove(path=path)
                logger.debug("Successfully removed %s.", path)
            except OSError as error:
                logger.error(error)
                removed_all = False

        return removed_all

    def get_purl_from_cdx_component(self, component: CDXComponent) -> PackageURL:
        """Construct and return a PackageURL from a CycloneDX component.

        Parameters
        ----------
        component: CDXComponent

        Returns
        -------
        PackageURL
            The PackageURL object constructed from the CycloneDX component.
        """
        return component.purl or PackageURL(
            type="maven",
            namespace=component.group,
            name=component.name,
            version=component.version or None,
        )
