# Copyright (c) 2022 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

# This is a trusted builder implemented as a reusable workflow that can be called by other
# Actions workflows. It checks, tests, and builds the artifacts including SBOM and documentations,
# and computes hash digests as output to be used by a SLSA provenance generator. The artifacts are
# always uploaded for every job to be used for debugging purposes, but they will be removed within
# the specified retention days. The Docker image is also built and tested in this workflow.
#
# Even though we run the build in a matrix to check against different platforms, due to a known
# limitation of reusable workflows that do not support setting strategy property from the caller
# workflow, we only generate artifacts for ubuntu-latest and Python 3.11, which can be used to
# create a release. For details see:
#
# https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations
#
# Note: if the build workflow needs to access secrets, they need to be passed by the caller using
# `secrets: inherit`. See also
#
# https://docs.github.com/en/actions/using-workflows/reusing-workflows
# https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions
#
# for the security recommendations.

name: Build the package
on:
  workflow_call:
permissions:
  contents: read
env:
  RELEASE_OS_X86_64: ubuntu-24.04  # Default OS for x86_64-compatible release artifacts.
  RELEASE_OS_ARM64: ubuntu-24.04-arm  # Default OS for ARM64-compatible release artifacts.
  RELEASE_PYTHON_VERSION: '3.11'  # Default Python version used for release artifacts.
  PACKAGE_PATH: src/macaron  # The relative Python package path to the repo.

jobs:
  build:
    name: Build Macaron
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # It is recommended to pin a Runner version specifically:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
        os: [ubuntu-24.04, ubuntu-24.04-arm]
        python: ['3.11']

    outputs:
      arch-env: ${{ steps.set-arch-env.outputs.arch_env }}

    steps:

    # Create a GitHub Actions environment variable that maps a matrix.os value to a more descriptive environment
    # value (e.g., ubuntu-x86-64 or ubuntu-arm64).
    - name: Determine architecture label
      id: set-arch-env
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
          echo "arch_env=ubuntu-x86-64" >> "$GITHUB_OUTPUT"
        elif [[ "${{ matrix.os }}" == "ubuntu-24.04-arm" ]]; then
          echo "arch_env=ubuntu-arm64" >> "$GITHUB_OUTPUT"
        else
          echo "arch_env=unknown" >> "$GITHUB_OUTPUT"
        fi

    - name: Test the env variable
      run: echo "Architecture-specific value ${{ steps.set-arch-env.outputs.arch_env }}"

    - name: Check out repository
      uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
      with:
        python-version: ${{ matrix.python }}

    # Install Java.
    - name: Set up JDK
      uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73 # v4.4.0
      with:
        distribution: oracle
        java-version: '17'

    # Using the Makefile assumes an activated virtual environment, which doesn't exist
    # when running in an Action environment (https://github.com/actions/setup-python/issues/359).
    # Instead we create an empty .venv folder so that the Makefile continues to function
    # while Python operates within the runner's global environment. It is safe to ignore
    # warnings from the Makefile about the missing virtual environment.
    - name: Create empty virtual environment for Actions
      run: mkdir .venv
    - name: Install dependencies
      run: make setup

    # Audit all currently installed packages for security vulnerabilities.
    - name: Audit installed packages
      run: make audit

    # Build the sdist and wheel distribution of the package and docs as a zip file.
    # We don't need to check and test the package separately because `make dist` runs
    # those targets first and only builds the package if they succeed.
    - name: Build the package
      run: make dist
      env:
        GITHUB_TOKEN: ${{ github.token }}

    # Generate the requirements.txt that contains the hash digests of the dependencies and
    # generate the SBOM using CyclonDX SBOM generator for the release Python version and
    # supported release OS targets.
    - name: Generate requirements.txt and SBOM
      if: >
        matrix.python == env.RELEASE_PYTHON_VERSION &&
        (matrix.os == env.RELEASE_OS_X86_64 || matrix.os == env.RELEASE_OS_ARM64)
      run: make requirements sbom

    # Remove the old requirements.txt file (which includes _all_ packages) and generate a
    # new one for the package and its actual and required dependencies only. Run this step
    # for the release Python version and supported release OS targets only.
    - name: Prune packages and generate required requirements.txt
      if: >
        matrix.python == env.RELEASE_PYTHON_VERSION &&
        (matrix.os == env.RELEASE_OS_X86_64 || matrix.os == env.RELEASE_OS_ARM64)
      run: |
        rm requirements.txt
        make prune requirements

    # Find the paths to the artifact files that will be included in the release, compute
    # the SHA digest for all the release files and encode them using Base64, and upload it
    # from this job. Run this step for the release Python version and supported release
    # OS targets only.
    - name: Compute package hash
      if: >
        matrix.python == env.RELEASE_PYTHON_VERSION &&
        (matrix.os == env.RELEASE_OS_X86_64 || matrix.os == env.RELEASE_OS_ARM64)
      id: compute-hash
      shell: bash
      run: |
        set -euo pipefail
        TARBALL_PATH=$(find dist/ -type f -name "*.tar.gz")
        WHEEL_PATH=$(find dist/ -type f -name "*.whl")
        REQUIREMENTS_PATH=$(find dist/ -type f -name "*-requirements.txt")
        SBOM_PATH=$(find dist/ -type f -name "*-sbom.json")
        SBOM_GO_PATH=$(find dist/ -type f -name "*-sbom-go.json")
        HTML_DOCS_PATH=$(find dist/ -type f -name "*-docs-html.zip")
        BUILD_EPOCH_PATH=$(find dist/ -type f -name "*-build-epoch.txt")
        DIGEST=$(sha256sum "$TARBALL_PATH" "$WHEEL_PATH" "$REQUIREMENTS_PATH" "$SBOM_PATH" \
          "$SBOM_GO_PATH" "$HTML_DOCS_PATH" "$BUILD_EPOCH_PATH" | base64 -w0)
        echo "Digest of artifacts is $DIGEST."
        echo "$DIGEST" > artifacts-sha256-file-${{ steps.set-arch-env.outputs.arch_env }}

    # For now only generate artifacts for the specified OS and Python version in env variables.
    # Currently reusable workflows do not support setting strategy property from the caller workflow.
    - name: Upload the package artifact for debugging and release
      if: >
        matrix.python == env.RELEASE_PYTHON_VERSION &&
        (matrix.os == env.RELEASE_OS_X86_64 || matrix.os == env.RELEASE_OS_ARM64)
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: artifacts-${{ steps.set-arch-env.outputs.arch_env }}
        path: ./dist*/
        if-no-files-found: error
        retention-days: 7

    # Run this step for the release Python version and supported release OS targets only.
    - name: Upload artifacts sha256
      if: >
        matrix.python == env.RELEASE_PYTHON_VERSION &&
        (matrix.os == env.RELEASE_OS_X86_64 || matrix.os == env.RELEASE_OS_ARM64)
      uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5.0
      with:
        name: artifacts-sha256-file-${{ steps.set-arch-env.outputs.arch_env }}
        path: artifacts-sha256-file-${{ steps.set-arch-env.outputs.arch_env }}
        retention-days: 7

  # This job calls the reusable workflow _build_docker.yaml to build and test
  # the Docker image. Note that the built image is not pushed to ghcr.io here.
  build_docker_image:
    needs: [build]
    permissions:
      contents: read
      packages: read
    uses: ./.github/workflows/_build_docker.yaml
    with:
      # TODO: use ${{ env.RELEASE_OS_X86_64 }}
      # when this issue is addressed: https://github.com/actions/runner/issues/2394.
      artifact-architecture: ubuntu-x86-64
