# Copyright (c) 2023 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

# This is a reuseable workflow to build and test the Docker image. Note that this workflow does not
# push the built Docker image. This reuseable workflow needs two mandatory inputs:
#   artifact-name: The name of the artifact to download. This is the same artifact generated by _build.yaml
#   artifact-sha256: The hash to verify against the downloaded artifact.

name: Build and push Docker image
on:
  workflow_call:
    inputs:
      artifact-name:
        required: true
        type: string
      artifact-sha256:
        required: true
        type: string
permissions:
  contents: read

jobs:
  build-docker:
    runs-on: ubuntu-latest
    permissions:
      packages: write # to push the test docker image
    steps:

    - name: Check out repository
      uses: actions/checkout@d632683dd7b4114ad314bca15554477dd762a938 # v4.2.0
      with:
        fetch-depth: 0

    # The Docker integration tests require Python 3.11.
    - name: Set up Python
      uses: actions/setup-python@42375524e23c412d93fb67b49958b491fce71c38 # v5.4.0
      with:
        python-version: '3.11'

    - name: Download artifact
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: ${{ inputs.artifact-name }}
        path: dist

    # Verify hashes by first computing hashes for the artifacts and then comparing them
    # against the hashes for the artifact.
    - name: Verify the artifact hash
      env:
        ARTIFACT_HASH: ${{ inputs.artifact-sha256 }}
      run: |
        set -euo pipefail
        echo "Hash of package should be $ARTIFACT_HASH."
        echo "$ARTIFACT_HASH" | base64 --decode | sha256sum --strict --check --status || exit 1

    # Login so the docker build has access to the internal dependencies image
    - name: Log in to GitHub Container Registry
      run: docker login ghcr.io --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}

    # Build the Docker image without pushing it.
    - name: Build the Docker image
      env:
        IMAGE_NAME: ghcr.io/oracle/macaron
      run: make build-docker

    - name: Install dependencies for integration test utility
      run: make setup-integration-test-utility-for-docker

    # Run the integration tests against the built Docker image.
    # - name: Test the Docker image
    #   env:
    #     # This environment variable will be picked up by run_macaron.sh.
    #     MACARON_IMAGE_TAG: test
    #     DOCKER_PULL: never
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: make integration-test-docker

    # Push the test Docker image.
    - name: Push the Docker image
      id: push-docker
      env:
        IMAGE_NAME: ghcr.io/oracle/macaron
        RELEASE_TAG: test
      run: |
        make push-docker-test
        IMAGE_AND_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$IMAGE_NAME")
        NAME=$(echo "$IMAGE_AND_DIGEST" | cut -d'@' -f1 | cut -d':' -f1)
        DIGEST=$(echo "$IMAGE_AND_DIGEST" | cut -d'@' -f2)
        {
          echo "image-name=${NAME}"
          echo "image-digest=${DIGEST}"
        } >> "$GITHUB_OUTPUT"

    # Generate the Docker image SBOM under the dist/ directory which will be published as part of the release assets.
    - name: Generate Docker sbom
      env:
        SYFT_BIN: ${{ github.workspace }}/bin
        RELEASE_TAG: test
        RELEASE_VERSION: test
        SYFT_VERSION: 1.29.0
      # We install Syft, which is an SBOM generator tool for Docker images, using the instructions from:
      #   https://github.com/anchore/syft#installation
      # We only generate SBOM in CycloneDX format.
      run: |
        mkdir -p "$SYFT_BIN"
        ASSET_NAME="syft_${SYFT_VERSION}_linux_amd64.tar.gz"
        CHECKSUMS="syft_${SYFT_VERSION}_checksums.txt"

        # Download artifacts.
        echo "Downloading $ASSET_NAME"
        curl --output "$ASSET_NAME" --progress-bar --location \
          "https://github.com/anchore/syft/releases/download/v${SYFT_VERSION}/${ASSET_NAME}"
        test -s "$ASSET_NAME" || (echo "Unable to download $ASSET_NAME" && exit 0)
        echo "Downloading $CHECKSUMS"
        curl --output "$CHECKSUMS"  --progress-bar --location \
          "https://github.com/anchore/syft/releases/download/v${SYFT_VERSION}/${CHECKSUMS}"
        test -s "$CHECKSUMS" || (echo "Unable to download $CHECKSUMS" && exit 0)

        EXPECTED=$(grep "${ASSET_NAME}" "${CHECKSUMS}" 2>/dev/null | tr '\t' ' ' | cut -d ' ' -f 1)
        SYFT_DIGEST=$(sha256sum "$ASSET_NAME" | cut -d ' ' -f 1)

        # Check if artifact is valid.
        if [ "$EXPECTED" == "$SYFT_DIGEST" ]; then
          tar -zxvf "$ASSET_NAME" -C "$SYFT_BIN" syft
          "$SYFT_BIN"/syft --version
          "$SYFT_BIN"/syft \
            ghcr.io/oracle/macaron:"$RELEASE_TAG" \
            -o cyclonedx-json=dist/macaron-"$RELEASE_VERSION"-sbom-docker.json
        else
          echo "Checksum for '$ASSET_NAME' did not verify: expected $EXPECTED but got $SYFT_DIGEST"
        fi

        # Remove the downloaded artifacts.
        rm -f "$ASSET_NAME"
        rm -f "$CHECKSUMS"

    # Upload the SBOM.
    - name: Upload the SBOM
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: sbom-macaron-test
        path: dist/macaron-test-sbom-docker.json
        if-no-files-found: error
        retention-days: 7
