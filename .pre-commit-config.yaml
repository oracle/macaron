# Copyright (c) 2022 - 2023, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks
default_install_hook_types: [pre-commit, commit-msg, pre-push]
default_stages: [commit]
minimum_pre_commit_version: 3.0.0

repos:

# These meta hooks check the pre-commit configuration itself.
- repo: meta
  hooks:
  - id: check-hooks-apply
  - id: check-useless-excludes

# Commitizen enforces semantic and conventional commit messages.
- repo: https://github.com/commitizen-tools/commitizen
  rev: 3.5.2
  hooks:
  - id: commitizen
    name: Check conventional commit message
    stages: [commit-msg]

# Sort imports.
- repo: https://github.com/pycqa/isort
  rev: 5.12.0
  hooks:
  - id: isort
    name: Sort import statements
    args: [--settings-path, pyproject.toml]

# Add Black code formatters.
- repo: https://github.com/ambv/black
  rev: 23.7.0
  hooks:
  - id: black
    name: Format code
    args: [--config, pyproject.toml]
- repo: https://github.com/asottile/blacken-docs
  rev: 1.15.0
  hooks:
  - id: blacken-docs
    name: Format code in docstrings
    args: [--line-length, '120']
    additional_dependencies: [black==22.10.0]

# Upgrade and rewrite Python idioms.
- repo: https://github.com/asottile/pyupgrade
  rev: v3.9.0
  hooks:
  - id: pyupgrade
    name: Upgrade code idioms
    files: ^src/macaron/|^tests/
    args: [--py311-plus]

# Similar to pylint, with a few more/different checks. For more available
# extensions: https://github.com/DmytroLitvinov/awesome-flake8-extensions
- repo: https://github.com/pycqa/flake8
  rev: 6.0.0
  hooks:
  - id: flake8
    name: Check flake8 issues
    files: ^src/macaron/|^tests/
    types: [text, python]
    additional_dependencies: [flake8-bugbear==22.10.27, flake8-builtins==2.0.1, flake8-comprehensions==3.10.1, flake8-docstrings==1.6.0, flake8-mutable==1.2.0, flake8-noqa==1.3.0, flake8-pytest-style==1.6.0, flake8-rst-docstrings==0.3.0, pep8-naming==0.13.2]
    args: [--config, .flake8]

# Check GitHub Actions workflow files.
- repo: https://github.com/Mateusz-Grzelinski/actionlint-py
  rev: v1.6.25
  hooks:
  - id: actionlint

# Run Pylint from the local repo to make sure venv packages
# specified in pyproject.toml are available.
- repo: local
  hooks:
  - id: pylint
    name: Check pylint issues
    entry: pylint
    language: python
    files: ^src/macaron/|^tests/
    types: [text, python]
    args: [--rcfile, pyproject.toml]

# Type-check all Python code.
- repo: local
  hooks:
  - id: mypy
    name: Check typing annotations
    entry: mypy
    language: python
    files: ^src/macaron/|^tests/
    types: [text, python]
    args: [--show-traceback, --config-file, pyproject.toml]

# Check for potential security issues.
- repo: https://github.com/PyCQA/bandit
  rev: 1.7.5
  hooks:
  - id: bandit
    name: Check for security issues
    args: [--configfile, pyproject.toml]
    files: ^src/macaron/|^tests/
    types: [text, python]
    additional_dependencies: ['bandit[toml]']

# Enable a whole bunch of useful helper hooks, too.
# See https://pre-commit.com/hooks.html for more hooks.
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v4.4.0
  hooks:
  - id: check-ast
  - id: check-case-conflict
  - id: check-merge-conflict
  - id: debug-statements
  - id: end-of-file-fixer
    stages: [commit]
  - id: trailing-whitespace
    args: [--markdown-linebreak-ext=md]
    stages: [commit]
    exclude: ^tests/(.)*\.ambr$
  - id: detect-private-key
  - id: detect-aws-credentials
    args: [--allow-missing-credentials]
  - id: check-yaml
    args: [--allow-multiple-documents]
  - id: check-toml
- repo: https://github.com/pre-commit/pygrep-hooks
  rev: v1.10.0
  hooks:
  - id: python-check-blanket-noqa
  # Disabling blanket-type-ignore for now until type stubs are added.
  # - id: python-check-blanket-type-ignore
  - id: python-check-mock-methods
  - id: python-use-type-annotations
  - id: rst-backticks
  - id: rst-directive-colons
  - id: rst-inline-touching-normal
  - id: text-unicode-replacement-char

# Check the reStructured Text files that make up
# this package's documentation.
# Commenting this out because https://github.com/Lucas-C/pre-commit-hooks-markup/issues/13
# - repo: https://github.com/Lucas-C/pre-commit-hooks-markup
#   rev: v1.0.1
#   hooks:
#   - id: rst-linter

# Check and prettify the configuration files.
- repo: https://github.com/macisamuele/language-formatters-pre-commit-hooks
  rev: v2.10.0
  hooks:
  - id: pretty-format-ini
    args: [--autofix]
  - id: pretty-format-yaml
    args: [--autofix]
  # Commenting this out because https://github.com/pappasam/toml-sort/issues/11
  # - id: pretty-format-toml
  #   args: [--autofix]

# On push to the remote, run the unit tests.
- repo: local
  hooks:
  - id: pytest
    name: Run unit tests
    entry: python -W always::DeprecationWarning -m pytest -c pyproject.toml --cov-config pyproject.toml
    language: system
    verbose: true
    always_run: true
    pass_filenames: false
    stages: [push]

# Checks the copyright header for .js, .py, and .java, etc. files.
- repo: local
  hooks:
  - id: copyright-checker
    name: Copyright checker
    entry: scripts/dev_scripts/copyright-checker.sh
    language: system
    always_run: true
    pass_filenames: false

# A linter for Golang
- repo: https://github.com/golangci/golangci-lint
  rev: v1.53.3
  hooks:
  - id: golangci-lint

# Other pre-commit hooks for golang:
#   *-mod hooks run on the MODULE of each staged Go files.
#   *-repo-mod hooks run on each MODULE in the repository. This allows us to add multiple go modules to this repo.
#   *-repo hooks only run in the REPOSITORY root folder.
# These hooks automatically run on staged Go files, go.mod and go.sum.
# Other staged files shouldn't trigger these hooks.
# Documentation: https://github.com/TekWizely/pre-commit-golang/blob/v1.0.0-rc.1/README.md.
- repo: https://github.com/tekwizely/pre-commit-golang
  rev: v1.0.0-rc.1
  hooks:
  - id: go-build-mod
  - id: go-build-repo-mod
    #
    # Go Mod Tidy
    #
  - id: go-mod-tidy
  - id: go-mod-tidy-repo
    #
    # Go Test
    #
  - id: go-test-mod
  - id: go-test-repo-mod
    #
    # Go Vet
    #
  - id: go-vet-mod
  - id: go-vet-repo-mod
    #
    # Go formatters
    #
  - id: go-fmt
  - id: go-fmt-repo
