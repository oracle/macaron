FROM container-registry.oracle.com/os/oraclelinux:9-slim as base

ENV HOME="/home/macaron" \
    PYTHON3_VERSION=3.11.1 \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Runtime dependencies
RUN set -eux; \
    microdnf upgrade -y; \
    microdnf install -y \
        # These are the runtime dependencies as specified by the official Python 3.11 slim-buster Dockerfile.
        # https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L17
        # what is the equivalent of netbase in oracle linux ?
        # netbase
        tzdata \
        ca-certificates \
        dnf; \
    dnf remove -y microdnf; \
    dnf clean all; \
    rm -rf /var/cache/yum; \
    rm -rf /var/cache/dnf;

RUN set -eux; \
    # Store the list of runtime dependencies to preserve.
    # https://dnf.readthedocs.io/en/latest/command_ref.html#history-command
    # Include systemd and dnf to avoid the warning of removal of protected packages.
    USER_MANUAL_INSTALLED="$(dnf history userinstalled | tail -n +2) systemd dnf"; \
    # We add an extra Yum repo that contains the package lcov.
    # We are following the convention as existing repo definition in OL9.
    # Example of a resolved URL: https://yum.oracle.com/repo/OracleLinux/OL9/developer/EPEL/x86_64/index.html
    echo -e \
"\
[ol9_epel]\n\
name=EPEL packages for test and development (\$basearch)\n\
baseurl=https://yum\$ociregion.\$ocidomain/repo/OracleLinux/OL9/developer/EPEL/\$basearch/\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle\n\
gpgcheck=1\n\
enabled=1\
" >> /etc/yum.repos.d/epel-ol9.repo; \
    # Clean all here so that when we run upgrade, the newly added Yum repo is used.
    dnf clean all; \
    dnf upgrade -y; \
    # The ol9_core_ready_builder repo is enabled for the package gdbm-devel.
    dnf --enablerepo=ol9_codeready_builder install -y \
        # Python build dependencies.
        # Note: there is an option to use `dnf builddep` to get all python build dependencies.
        # However, there are a couple of issues:
        # - A regular python installation may not need all of these packages. A lot of packages are
        # optional packages, which are only required if some specific libraries are used.
        # - When consulting open-source projects (e.g. official docker, deadsnakes), they do not use the `builddep` command.
        # - We have to add one particular repository not available in the base image to get all packages
        # that `dnf buildep` tries to install.
        # - Running `dnf builddep` significantly increases the size of the image (to nearly 3GB).
        # References:
        # - https://devguide.python.org/getting-started/setup-building/index.html#linux
        # - https://github.com/deadsnakes/runbooks/blob/main/dockerfiles/Dockerfile.jammy
        # - https://github.com/docker-library/buildpack-deps/blob/master/debian/bullseye/Dockerfile
        # which depends on: https://github.com/docker-library/python/blob/master/3.11/bullseye/Dockerfile
        autoconf       \
        bluez-libs     \
        bzip2-devel    \
        expat-devel    \
        libdb-devel    \
        libffi-devel   \
        libuuid-devel  \
        gcc            \
        gdbm-devel     \
        glibc-devel    \
        gnupg          \
        gpm-devel      \
        lcov           \
        make           \
        ncurses-devel  \
        openssl-devel  \
        pkgconfig      \
        readline-devel \
        sqlite-devel   \
        tk-devel       \
        wget           \
        xz             \
        xz-devel       \
        zlib-devel     \
        # Used by the original Python Dockerfile to query for used shared libraries.
        # https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L34
        # https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L114
        dpkg-dev;     \
    # Pull the source code of Python, compile and install from source.
    # We follow https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L29
    # However, some modification are applied to make it suitable for Oracle Linux.
    wget -O python.tar.xz https://www.python.org/ftp/python/$PYTHON3_VERSION/Python-$PYTHON3_VERSION.tgz; \
    mkdir -p /usr/src/python; \
	tar --extract --directory /usr/src/python --strip-components=1 --file python.tar.xz; \
	rm python.tar.xz; \
    cd /usr/src/python; \
    ./configure \
        --enable-loadable-sqlite-extensions \
		--enable-optimizations \
		--enable-option-checking=fatal \
		--enable-shared \
		--with-lto \
		--with-system-expat \
		--without-ensurepip \
	; \
    # What are they doing here?
    nproc="$(nproc)"; \
	LDFLAGS="-Wl,--strip-all"; \
	make -j "$nproc" \
		"EXTRA_CFLAGS=${EXTRA_CFLAGS:-}" \
		"LDFLAGS=${LDFLAGS:-}" \
		"PROFILE_TASK=${PROFILE_TASK:-}" \
	; \
# https://github.com/docker-library/python/issues/784
# prevent accidental usage of a system installed libpython of the same version
    rm python; \
	make -j "$nproc" \
		"EXTRA_CFLAGS=${EXTRA_CFLAGS:-}" \
		"LDFLAGS=${LDFLAGS:--Wl},-rpath='\$\$ORIGIN/../lib'" \
		"PROFILE_TASK=${PROFILE_TASK:-}" \
		python \
	; \
	make install; \
	\
	cd /; \
	rm -rf /usr/src/python; \
	\
	find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
			-o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \) \) \
		\) -exec rm -rf '{}' + \
	; \
	\
	ldconfig; \
	# \
    # # dnf mark remove does not accept wildcard, I think?
	dnf list installed | tail -n +2 | cut -d' ' -f1 | xargs dnf mark remove > /dev/null; \
    [ -z "$USER_MANUAL_INSTALLED" ] || dnf mark install $USER_MANUAL_INSTALLED; \
    find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r dnf mark install \
	; \
	# # apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	# # rm -rf /var/lib/apt/lists/*; \
	# # \
	dnf autoremove -y; \
    dnf clean all; \
    rm -rf /var/cache/yum; \
    rm -rf /var/cache/dnf; \
    python3 --version

# make some useful symlinks that are expected to exist ("/usr/local/bin/python" and friends)
RUN set -eux; \
	for src in idle3 pydoc3 python3 python3-config; do \
		dst="$(echo "$src" | tr -d 3)"; \
		[ -s "/usr/local/bin/$src" ]; \
		[ ! -e "/usr/local/bin/$dst" ]; \
		ln -svT "$src" "/usr/local/bin/$dst"; \
	done

# https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L133
ENV PYTHON_PIP_VERSION=22.3.1 \
    # https://github.com/docker-library/python/issues/365
    PYTHON_SETUPTOOLS_VERSION=65.5.1 \
    # https://github.com/pypa/get-pip
    PYTHON_GET_PIP_URL="https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py" \
    PYTHON_GET_PIP_SHA256="394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637"

RUN set -eux; \
    # Include systemd and dnf to avoid the warning of removal of protected packages.
	USER_MANUAL_INSTALLED="$(dnf history userinstalled | tail -n +2) systemd dnf"; \
	dnf upgrade -y; \
	dnf install -y wget; \
	wget -O get-pip.py "$PYTHON_GET_PIP_URL"; \
	echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum -c -; \
	dnf list installed | tail -n +2 | cut -d' ' -f1 | xargs dnf mark remove > /dev/null; \
	[ -z "$USER_MANUAL_INSTALLED" ] || dnf mark install $USER_MANUAL_INSTALLED; > /dev/null; \
	dnf autoremove -y; \
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		--no-compile \
		"pip==$PYTHON_PIP_VERSION" \
		"setuptools==$PYTHON_SETUPTOOLS_VERSION" \
	; \
	rm -f get-pip.py; \
	\
    dnf clean all; \
    rm -rf /var/cache/yum; \
    rm -rf /var/cache/dnf; \
	pip --version;

CMD [ "python3" ]

FROM base as setup-binaries

ENV GOROOT="/usr/local/go" \
    GO_VERSION=1.18.3

ENV PATH=$GOROOT/bin:$PATH

RUN set -eux; \
    dnf upgrade -y; \
    dnf install -y \
        git \
        wget \
        gzip \
        unzip \
        make; \
    rm -rf $GOROOT; \
    wget -O go.tar.gz https://go.dev/dl/go$GO_VERSION.linux-amd64.tar.gz; \
    tar -C /usr/local -xzf go.tar.gz; \
    rm go.tar.gz; \
    go version; \
    dnf clean all; \
    rm -rf /var/cache/yum; \
    rm -rf /var/cache/dnf;

WORKDIR /root/setup-binaries
COPY Makefile ./
RUN mkdir -p ./src/macaron/resources && \
    mkdir -p ./src/macaron/bin && \
    make setup-binaries

RUN rm /root/setup-binaries/Makefile

# This stage is for the the final production image.
# The final image contains the Python3.11.1 installation from the python-builder stage,
# the runtime library (i.e openssl, git and jdk11) and the Python dependencies of Macaron.
FROM base as final

ENV HOME="/home/macaron" \
    JAVA_HOME="/usr/lib/jvm/java-11-openjdk"

ENV PACKAGE_PATH=$HOME/.venv/lib/python3.11/site-packages/macaron \
    PATH=$JAVA_HOME/bin:$PATH

# Create the macaron user and group with abritary UID and GID.
# The macaron GID and UID in this image will be modified by the
# user.sh script on startup to get the UID and GID of the user who started
# the Docker container.
RUN groupadd --gid 43147 macaron && \
    useradd --uid 43147 --create-home --gid 43147 macaron

RUN dnf upgrade -y && \
    dnf install -y \
        git \
        java-11-openjdk-devel && \
    dnf clean all -y && \
    rm -rf /var/cache/yum && \
    rm -rf /var/cache/dnf

WORKDIR $HOME

# Build time ARG. This argument specifies the path of dist from the host machine.
ARG WHEEL_PATH
ARG WHEEL_FILE_NAME

# Installing the Python dependencies in the Python virtual environment.
# We switch to user macaron so that when we install the dependencies using pip,
# the warning of not having correct ownership of /home/macaron is not raised.
# TODO: resolve hardcoded file names.
USER macaron:macaron
COPY --chown=macaron:macaron $WHEEL_PATH/$WHEEL_FILE_NAME $HOME/$WHEEL_FILE_NAME
RUN python3 -m venv $HOME/.venv && \
    . .venv/bin/activate && \
    pip install --no-compile --no-cache-dir $HOME/$WHEEL_FILE_NAME && \
    rm -rf $HOME/$WHEEL_FILE_NAME && \
    deactivate

COPY --chown=macaron:macaron docker/user.sh $HOME/user.sh

COPY --from=setup-binaries --chown=macaron:macaron /root/setup-binaries/src/macaron $PACKAGE_PATH

# We enable the root user here so that the user.sh script can modify the
# GID and UID of user macaron at startup to match the GID and UID
# of the current user in the host machine.
USER root
ENTRYPOINT [ "./user.sh" ]


# TODO: Update usage of settings.xml in user.sh
# Clean up and write docs
# Should we remove pip and setup tools in the deploy image.
