# Copyright (c) 2022 - 2023, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

FROM container-registry.oracle.com/os/oraclelinux:9-slim as base

ENV HOME="/home/macaron" \
    PYTHON3_VERSION=3.11.1 \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    # http://bugs.python.org/issue19846
    # > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
    LANG="C.UTF-8" \
    # The GPG key to verify the source tar ball
    # following the instructions on https://www.python.org/downloads/
    PYTHON_SOURCE_GPG="A035C8C19219BA821ECEA86B64E628F8D684696D"

ENV PATH=/usr/local/bin:$PATH

# Python's runtime dependencies.
RUN : \
    && set -eux \
    && microdnf upgrade -y \
    && microdnf install -y \
        # These are the runtime dependencies as specified by the official Python 3.11 slim-buster Dockerfile.
        # https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L17
        # We couldn't find the equivalent of netbase in Oracle Linux.
        # netbase
        tzdata \
        ca-certificates \
        # We switch to dnf as the dnf mark command is not available in microdnf.
        dnf \
    && dnf remove -y microdnf \
    && dnf clean all \
    && rm -rf /var/cache/yum \
    && rm -rf /var/cache/dnf

RUN : \
    && set -eux \
    # Store the list of user installed packages so that we could preserve it when we clean up unused packages.
    # systemd and dnf is included to avoid warnings of protected packages.
    # https://dnf.readthedocs.io/en/latest/command_ref.html#history-command
    && USER_MANUAL_INSTALLED="$(dnf history userinstalled | tail -n +2) systemd dnf" \
    # We add an extra yum repo that contains the package lcov.
    # We are following the convention as existing repo definitions in OL9.
    # The following yum repo will be resolved to this URL in OL9:
    #       https://yum.oracle.com/repo/OracleLinux/OL9/developer/EPEL/x86_64/index.html
    && echo -e \
"\
[ol9_epel]\n\
name=EPEL packages for test and development (\$basearch)\n\
baseurl=https://yum\$ociregion.\$ocidomain/repo/OracleLinux/OL9/developer/EPEL/\$basearch/\n\
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle\n\
gpgcheck=1\n\
enabled=1\
" >> /etc/yum.repos.d/epel-ol9.repo \
    # We clean all here so that when we run upgrade, the newly added yum repo is used.
    && dnf clean all \
    && dnf upgrade -y \
    # The ol9_core_ready_builder repo has already been defined and it is enabled for the package:
    #       gdbm-devel
    && dnf --enablerepo=ol9_codeready_builder install -y \
        # Install Python build dependencies.
        # References:
        #       https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L34
        # Note that these packages are available on the yum repos in OL9 (which is based on Redhat). Therefore, it might be different
        # when used on other Linux based (for Debian-based Linux, please see the link above).
        autoconf       \
        bluez-libs     \
        bzip2-devel    \
        expat-devel    \
        libdb-devel    \
        libffi-devel   \
        libuuid-devel  \
        gcc            \
        gdbm-devel     \
        glibc-devel    \
        gnupg          \
        gpm-devel      \
        lcov           \
        make           \
        ncurses-devel  \
        openssl-devel  \
        pkgconfig      \
        readline-devel \
        sqlite-devel   \
        tk-devel       \
        wget           \
        xz             \
        xz-devel       \
        zlib-devel     \
        # The dpkg-dev package is used to query for used shared libraries.
        # References:
        #       https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L34
        #       https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L114
        dpkg-dev      \
    # Download the source tarball and verify its integrity.
    && wget -O python.tar.xz https://www.python.org/ftp/python/$PYTHON3_VERSION/Python-$PYTHON3_VERSION.tar.xz \
    && wget -O python.tar.xz.asc https://www.python.org/ftp/python/$PYTHON3_VERSION/Python-$PYTHON3_VERSION.tar.xz.asc \
	&& GNUPGHOME="$(mktemp -d)" \
    && export GNUPGHOME \
	&& gpg --recv-keys "$PYTHON_SOURCE_GPG" \
	&& gpg --verify python.tar.xz.asc python.tar.xz \
	&& command -v gpgconf > /dev/null && gpgconf --kill all || : \
	&& rm -rf "$GNUPGHOME" python.tar.xz.asc \
    # Compile and install Python from source.
    && mkdir -p /usr/src/python \
	&& tar --extract --directory /usr/src/python --strip-components=1 --file python.tar.xz \
	&& rm python.tar.xz \
    && cd /usr/src/python \
    && gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" \
    && ./configure \
        --build="$gnuArch" \
        --enable-loadable-sqlite-extensions \
		--enable-optimizations \
		--enable-option-checking=fatal \
		--enable-shared \
		--with-lto \
		--with-system-expat \
		--without-ensurepip \
    && nproc="$(nproc)" \
	&& LDFLAGS="-Wl,--strip-all" \
	&& make -j "$nproc" \
		"EXTRA_CFLAGS=${EXTRA_CFLAGS:-}" \
		"LDFLAGS=${LDFLAGS:-}" \
		"PROFILE_TASK=${PROFILE_TASK:-}" \
# https://github.com/docker-library/python/issues/784
# prevent accidental usage of a system installed libpython of the same version
    && rm python \
	&& make -j "$nproc" \
		"EXTRA_CFLAGS=${EXTRA_CFLAGS:-}" \
		"LDFLAGS=${LDFLAGS:--Wl},-rpath='\$\$ORIGIN/../lib'" \
		"PROFILE_TASK=${PROFILE_TASK:-}" \
		python \
	&& make install \
	&& cd / \
	&& rm -rf /usr/src/python \
	&& find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests -o -name idle_test \) \) \
			-o \( -type f -a \( -name '*.pyc' -o -name '*.pyo' -o -name 'libpython*.a' \) \) \
		\) -exec rm -rf '{}' + \
	&& ldconfig \
    # We mark all unecessary packages to be removed while preserving the user installed packages.
	&& dnf list installed | tail -n +2 | cut -d' ' -f1 | xargs -r dnf mark remove > /dev/null \
    && [ -z "$USER_MANUAL_INSTALLED" ] || dnf mark install $USER_MANUAL_INSTALLED \
    # Look for share libraries that are used by looking through the executables in /usr/local.
    # Reference:
    #       https://github.com/docker-library/python/blob/f568f56f28fab0fe87b34db777e2c2861cef002b/3.11/slim-buster/Dockerfile#L111
    && find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r dnf mark install \
    # Running dnf autoremove will remove all packages that are marked with "dnf mark remove".
    # https://dnf.readthedocs.io/en/latest/command_ref.html#autoremove-command
	&& dnf autoremove -y \
    && dnf clean all \
    && rm -rf /var/cache/yum \
    && rm -rf /var/cache/dnf \
    && python3 --version

# Make some useful symlinks that are expected to exist ("/usr/local/bin/python" and friends).
RUN : \
    && set -eux \
	&& for src in idle3 pydoc3 python3 python3-config; do \
		dst="$(echo "$src" | tr -d 3)"; \
		[ -s "/usr/local/bin/$src" ]; \
		[ ! -e "/usr/local/bin/$dst" ]; \
		ln -svT "$src" "/usr/local/bin/$dst"; \
	done

# Installing pip this way will results in a smaller image size comparing to
# installing with --ensure-pip.
ENV PYTHON_PIP_VERSION=22.3.1 \
    # https://github.com/docker-library/python/issues/365
    PYTHON_SETUPTOOLS_VERSION=65.5.1 \
    # https://github.com/pypa/get-pip
    PYTHON_GET_PIP_URL="https://github.com/pypa/get-pip/raw/d5cb0afaf23b8520f1bbcfed521017b4a95f5c01/public/get-pip.py" \
    PYTHON_GET_PIP_SHA256="394be00f13fa1b9aaa47e911bdb59a09c3b2986472130f30aa0bfaf7f3980637"

RUN : \
    && set -eux \
    # Include systemd and dnf to avoid the warning of removal of protected packages.
	&& USER_MANUAL_INSTALLED="$(dnf history userinstalled | tail -n +2) systemd dnf" \
	&& dnf upgrade -y \
	&& dnf install -y wget findutils \
	&& wget -O get-pip.py "$PYTHON_GET_PIP_URL" \
	&& echo "$PYTHON_GET_PIP_SHA256 *get-pip.py" | sha256sum -c - \
	&& dnf list installed | tail -n +2 | cut -d' ' -f1 | xargs -r dnf mark remove > /dev/null \
	&& [ -z "$USER_MANUAL_INSTALLED" ] || dnf mark install $USER_MANUAL_INSTALLED > /dev/null \
	&& dnf autoremove -y \
	&& python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		--no-compile \
		"pip==$PYTHON_PIP_VERSION" \
		"setuptools==$PYTHON_SETUPTOOLS_VERSION" \
	&& rm -f get-pip.py \
	\
    && dnf clean all \
    && rm -rf /var/cache/yum \
    && rm -rf /var/cache/dnf \
	&& pip --version

CMD [ "python3" ]

FROM base as py311-jdk17

ENV JAVA_HOME="/usr/lib/jvm/java-17-openjdk"

ENV PATH=$JAVA_HOME/bin:$PATH

RUN : \
    && set -eux \
    && dnf upgrade -y \
    && dnf install -y java-17-openjdk-devel \
    && dnf clean all \
    && rm -rf /var/cache/yum \
    && rm -rf /var/cache/dnf

FROM py311-jdk17 as setup-binaries

ENV GOROOT="/usr/local/go" \
    GO_VERSION=1.18.3

ENV PATH=$GOROOT/bin:$PATH

RUN : \
    && set -eux \
    && dnf upgrade -y \
    && dnf install -y \
        git \
        wget \
        gzip \
        unzip \
        make \
    && rm -rf $GOROOT \
    && wget -O go.tar.gz https://go.dev/dl/go$GO_VERSION.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go.tar.gz \
    && rm go.tar.gz \
    && go version \
    && dnf clean all \
    && rm -rf /var/cache/yum \
    && rm -rf /var/cache/dnf

WORKDIR /root/setup-binaries
COPY Makefile ./
COPY src/macaron/resources src/macaron/resources
RUN : \
    && mkdir -p ./src/macaron/bin \
    && make setup-binaries \
    && rm /root/setup-binaries/Makefile

FROM py311-jdk17 as py311-jdk17-souffle

WORKDIR /souffle-src

# The instructions to build Souffle in Oracle Linux is referenced from:
#       https://github.com/souffle-lang/souffle/blob/master/.github/images/oraclelinux-8/Dockerfile
RUN : \
    && set -eux \
    && USER_MANUAL_INSTALLED="$(dnf history userinstalled | tail -n +2) systemd dnf" \
    && dnf upgrade -y \
    && dnf --enablerepo=ol9_codeready_builder install -y \
        autoconf \
        automake \
        bash-completion \
        bison \
        clang \
        cmake \
        doxygen \
        flex \
        gcc-c++ \
        git \
        libffi-devel \
        libtool \
        make \
        # The package mcpp could not be found anywhere in available oracle linux 9 repos.
        # However, souffle could be built without it.
        # mcpp
        ncurses-devel \
        pkg-config \
        python39 \
        rpm-build \
        sqlite-devel \
        zlib-devel \
    && git clone --depth=1 https://github.com/souffle-lang/souffle/ -b 2.3 \
    && cd souffle \
    && cmake -S . -B build -DSOUFFLE_DOMAIN_64BIT=ON -DCMAKE_INSTALL_PREFIX="/usr/local" \
    && nproc="$(nproc)" \
    && cmake --build build --target install -j "$nproc" \
    && dnf list installed | tail -n +2 | cut -d' ' -f1 | xargs -r dnf mark remove > /dev/null \
	&& [ -z "$USER_MANUAL_INSTALLED" ] || dnf mark install $USER_MANUAL_INSTALLED > /dev/null \
	&& dnf autoremove -y \
    && cd / \
    && rm -rf /souffle-src \
    && dnf clean all \
    && rm -rf /var/cache/yum \
    && rm -rf /var/cache/dnf \
    && souffle --version

FROM py311-jdk17-souffle as final

ENV HOME="/home/macaron"

ENV PACKAGE_PATH=$HOME/.venv/lib/python3.11/site-packages/macaron

# Create the macaron user and group with abritary UID and GID.
# The macaron GID and UID in this image will be modified by the
# user.sh script on startup to get the UID and GID of the user who started
# the Docker container.
RUN : \
    && groupadd --gid 43147 macaron \
    && useradd --uid 43147 --create-home --gid 43147 macaron \
    && dnf upgrade -y \
    && dnf install -y \
        git \
    && dnf clean all -y \
    && rm -rf /var/cache/yum \
    && rm -rf /var/cache/dnf

WORKDIR $HOME

# Build time ARG. This argument specifies the path of dist from the host machine.
ARG WHEEL_PATH
ARG WHEEL_FILE_NAME

# Installing the Python dependencies in the Python virtual environment.
# We switch to user macaron so that when we install the dependencies using pip,
# the warning of not having correct ownership of /home/macaron is not raised.
# TODO: resolve hardcoded file names.
USER macaron:macaron
COPY --chown=macaron:macaron $WHEEL_PATH/$WHEEL_FILE_NAME $HOME/$WHEEL_FILE_NAME
RUN : \
    && python3 -m venv $HOME/.venv \
    && . .venv/bin/activate \
    && pip install --no-compile --no-cache-dir --upgrade pip \
    && pip install --no-compile --no-cache-dir $HOME/$WHEEL_FILE_NAME \
    && rm -rf $HOME/$WHEEL_FILE_NAME \
    && deactivate

COPY --chown=macaron:macaron docker/user.sh $HOME/user.sh

COPY --from=setup-binaries --chown=macaron:macaron /root/setup-binaries/src/macaron $PACKAGE_PATH

# We enable the root user here so that the user.sh script can modify the
# GID and UID of user macaron at startup to match the GID and UID
# of the current user in the host machine.
USER root
ENTRYPOINT [ "./user.sh" ]
